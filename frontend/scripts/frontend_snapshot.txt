# TOTETAXI FRONTEND EXPORT
# Generated: 2025-09-13 11:25:07.513251
# Files: 50

# ==== next-env.d.ts ====

```
/// <reference types="next" />
/// <reference types="next/image-types/global" />
/// <reference path="./.next/types/routes.d.ts" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.

```

# ==== next.config.ts ====

```
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
};

export default nextConfig;

```

# ==== package.json ====

```
{
  "name": "frontend",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "eslint"
  },
  "dependencies": {
    "@headlessui/react": "^2.2.7",
    "@heroicons/react": "^2.2.0",
    "@hookform/resolvers": "^3.10.0",
    "@tanstack/react-query": "^5.87.1",
    "@tanstack/react-query-devtools": "^5.87.1",
    "axios": "^1.11.0",
    "clsx": "^2.1.1",
    "next": "15.5.0",
    "react": "19.1.0",
    "react-dom": "19.1.0",
    "react-hook-form": "^7.62.0",
    "tailwind-merge": "^2.6.0",
    "zod": "^3.25.76",
    "zustand": "^4.5.7"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "autoprefixer": "^10.4.21",
    "eslint": "^9",
    "eslint-config-next": "15.5.0",
    "postcss": "^8.5.6",
    "tailwindcss": "^3.4.17",
    "typescript": "^5"
  }
}

```

# ==== postcss.config.js ====

```
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

```

# ==== src/app/about/page.tsx ====

```
// frontend/src/app/about/page.tsx - Real Tote Taxi story
import { MainLayout } from '@/components/layout/main-layout';
import { Card, CardContent, CardHeader } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import Link from 'next/link';

export default function AboutPage() {
  return (
    <MainLayout>
      <div className="container mx-auto px-4 py-16">
        {/* Hero Section */}
        <div className="text-center mb-16">
          <h1 className="text-4xl md:text-5xl font-serif font-bold text-navy-900 mb-6">
            Welcome to Tote Taxi
          </h1>
          <p className="text-xl text-navy-700 max-w-3xl mx-auto">
            A door-to-door delivery, storage, courier, and mini moving service serving the Hamptons, 
            NYC, all major NY airports, Connecticut, and South Florida.
          </p>
        </div>

        {/* What We Do */}
        <section className="mb-20">
          <Card variant="luxury">
            <CardHeader>
              <h2 className="text-3xl font-serif font-bold text-navy-900 text-center">
                What We Do + Where We Go
              </h2>
            </CardHeader>
            <CardContent>
              <div className="space-y-6">
                <p className="text-navy-700 text-lg">
                  Tote Taxi offers a luxury <strong>multi-arm delivery service</strong> with additional{' '}
                  <strong>custom service offerings</strong> for people traveling to and from{' '}
                  <strong>New York</strong>, <strong>the Hamptons</strong>, <strong>South Florida</strong>{' '}
                  (Palm Beach, Boca Raton, Miami, Jupiter, Fort Lauderdale, and more), and{' '}
                  <strong>all major NYC airports</strong> (JFK, LGA, and EWR).
                </p>
                
                <div className="bg-gold-50 border border-gold-200 rounded-lg p-6">
                  <h3 className="font-medium text-navy-900 mb-3">We Carry It All</h3>
                  <p className="text-navy-700">
                    Same-day, door-to-door service for <strong>luggage, golf clubs, shopping bags, bikes, 
                    exercise equipment, baby gear, pet supplies, clothing, forgotten items, small furniture, 
                    accessories, and so much more.</strong>
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>
        </section>

        {/* Our Philosophy */}
        <section className="mb-20">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-12">
            <div>
              <h2 className="text-3xl font-serif font-bold text-navy-900 mb-6">
                We Are Hands-On... So You Can Be Hands-Off
              </h2>
              <div className="space-y-4 text-navy-700">
                <p>
                  <strong>Convenience is a luxury.</strong> Don't want to take everything back with you? 
                  We offer day, weekend, and seasonal storage options – whether it's for a short trip 
                  or winter storage for your summer gear and essentials.
                </p>
                <p>
                  Every family needs a <strong>Mini Move</strong>. Tote Taxi offers the ability to pack 
                  whatever you need and get it quickly to your summer home and back to the city at the 
                  end of the season.
                </p>
                <p>
                  Do you need help packing? We are happy to recommend any one of our packing partners 
                  to ensure a clutter-free summer vacation. We truly tote it all – treating your items 
                  as if they were our own.
                </p>
              </div>
            </div>
            
            <Card variant="elevated">
              <CardContent>
                <div className="text-center">
                  <h3 className="text-xl font-medium text-navy-900 mb-4">
                    A Trusted Luxury Delivery Service
                  </h3>
                  <p className="text-navy-700 mb-6">
                    Our professional same-day luxe courier service is perfect for forgotten or 
                    last-minute items. We also offer an array of <strong>custom services upon request</strong>.
                  </p>
                  <p className="text-navy-600 text-sm">
                    Providing seamless assistance and expert guidance, Tote Taxi elevates the travel experience – the haute courier.
                  </p>
                </div>
              </CardContent>
            </Card>
          </div>
        </section>

        {/* Founder Story */}
        <section className="mb-20">
          <Card variant="luxury">
            <CardHeader>
              <h2 className="text-3xl font-serif font-bold text-navy-900 text-center">
                About Our Founder
              </h2>
            </CardHeader>
            <CardContent>
              <div className="max-w-3xl mx-auto">
                <h3 className="text-xl font-medium text-navy-900 mb-4 text-center">
                  Meet Danielle!
                </h3>
                
                <div className="space-y-4 text-navy-700">
                  <p>
                    Hello! It's a pleasure to meet you.
                  </p>
                  <p>
                    I started this business because I wanted a seamless way to get my suitcase 
                    (which was packed with too many shoes) to and from the Hamptons and NYC.
                  </p>
                  <p>
                    Are you flying with BLADE and need your golf bags waiting for you at Sebonack? 
                    Are you spending a Sunday at Surf Lodge and need a place to store your luggage 
                    for the day? Or, maybe you are spending the summer in the Hamptons and want to 
                    bring your Peloton?
                  </p>
                  <p>
                    Are you in the Hamptons and need a dress delivered to you for an event from 
                    Bergdorf Goodman last minute? Did you leave something small, but absolutely 
                    essential in the city? Let us help!
                  </p>
                  <p>
                    Whatever the case may be, we are here to help get your things where they need 
                    to go and with the utmost professional care.
                  </p>
                  <p className="text-center font-medium text-navy-900">
                    Thank you for the opportunity to serve you – see you at the beach!
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>
        </section>

        {/* Company Timeline */}
        <section className="mb-20">
          <h2 className="text-3xl font-serif font-bold text-navy-900 text-center mb-12">
            Our Journey
          </h2>
          <div className="space-y-8">
            <Card variant="elevated">
              <CardContent>
                <div className="flex items-center">
                  <div className="w-16 h-16 bg-navy-900 text-white rounded-full flex items-center justify-center text-xl font-bold mr-6">
                    2016
                  </div>
                  <div>
                    <h3 className="text-lg font-medium text-navy-900">Founded</h3>
                    <p className="text-navy-700">Danielle Candela founded Tote Taxi to solve the stress of traveling with cumbersome luggage between Manhattan and the Hamptons.</p>
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card variant="elevated">
              <CardContent>
                <div className="flex items-center">
                  <div className="w-16 h-16 bg-navy-900 text-white rounded-full flex items-center justify-center text-xl font-bold mr-6">
                    2018
                  </div>
                  <div>
                    <h3 className="text-lg font-medium text-navy-900">Official Launch</h3>
                    <p className="text-navy-700">Tote Taxi officially launched operations, focusing on convenience, style, and peace of mind for luxury travelers.</p>
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card variant="elevated">
              <CardContent>
                <div className="flex items-center">
                  <div className="w-16 h-16 bg-navy-900 text-white rounded-full flex items-center justify-center text-xl font-bold mr-6">
                    2024
                  </div>
                  <div>
                    <h3 className="text-lg font-medium text-navy-900">Expanded Service</h3>
                    <p className="text-navy-700">Now serving NYC, Hamptons, Connecticut, South Florida, and all major NYC airports with partnerships including BLADE and Cultured Magazine.</p>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </section>

        {/* CTA */}
        <div className="text-center">
          <h2 className="text-2xl font-serif font-bold text-navy-900 mb-4">
            Ready to Experience Hands-Free Travel?
          </h2>
          <p className="text-navy-700 mb-8 max-w-2xl mx-auto">
            Join thousands of satisfied clients who trust Tote Taxi for seamless delivery service. 
            From forgotten essentials to seasonal moves, we handle it all with professional care.
          </p>
          <div className="flex flex-col sm:flex-row gap-4 justify-center">
            <Link href="/book">
              <Button variant="primary" size="lg">
                Book Your Move
              </Button>
            </Link>
            <Link href="/contact">
              <Button variant="outline" size="lg">
                Contact Our Team
              </Button>
            </Link>
          </div>
        </div>
      </div>
    </MainLayout>
  );
}
```

# ==== src/app/book/page.tsx ====

```
'use client';

import { BookingWizard } from '@/components/booking';
import { MainLayout } from '@/components/layout/main-layout';

export default function BookPage() {
  // NO AUTH PROTECTION - this page works for both guest and authenticated users
  return (
    <MainLayout>
      <div className="min-h-screen bg-gradient-to-br from-cream-50 to-cream-100">
        <BookingWizard />
      </div>
    </MainLayout>
  );
}
```

# ==== src/app/contact/page.tsx ====

```
// frontend/src/app/contact/page.tsx - Real Tote Taxi contact info
'use client';

import { useState } from 'react';
import { MainLayout } from '@/components/layout/main-layout';
import { Card, CardContent, CardHeader } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import Link from 'next/link';

export default function ContactPage() {
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    phone: '',
    service: '',
    message: '',
  });

  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submitted, setSubmitted] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);
    
    // Simulate form submission
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    setSubmitted(true);
    setIsSubmitting(false);
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value
    });
  };

  if (submitted) {
    return (
      <MainLayout>
        <div className="container mx-auto px-4 py-16">
          <div className="max-w-2xl mx-auto text-center">
            <div className="text-6xl mb-6">📦</div>
            <h1 className="text-3xl font-serif font-bold text-navy-900 mb-6">
              We'll Get Back to You ASAP!
            </h1>
            <Card variant="luxury">
              <CardContent>
                <p className="text-navy-700 mb-6">
                  Your message has been received. Our team will respond as quickly as possible 
                  to help with your delivery needs.
                </p>
                <div className="flex flex-col sm:flex-row gap-4 justify-center">
                  <Link href="/book">
                    <Button variant="primary">
                      Book a Delivery
                    </Button>
                  </Link>
                  <Link href="/">
                    <Button variant="outline">
                      Return Home
                    </Button>
                  </Link>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </MainLayout>
    );
  }

  return (
    <MainLayout>
      <div className="container mx-auto px-4 py-16">
        {/* Hero Section */}
        <div className="text-center mb-16">
          <h1 className="text-4xl md:text-5xl font-serif font-bold text-navy-900 mb-6">
            Contact Us Now
          </h1>
          <p className="text-xl text-navy-700 max-w-3xl mx-auto mb-4">
            Can't find what you are looking for? Our Customer Service Team is available to help with any questions.
          </p>
          <p className="text-lg text-navy-600">
            Be sure to check out our <Link href="/faq" className="text-navy-900 hover:underline">FAQ here</Link>.
          </p>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-12">
          {/* Contact Form */}
          <div>
            <Card variant="elevated">
              <CardHeader>
                <h2 className="text-2xl font-serif font-bold text-navy-900">
                  Get Started Here
                </h2>
                <p className="text-navy-700">
                  Please fill out our <strong>brief survey</strong> and we'll get back to you ASAP.
                </p>
              </CardHeader>
              <CardContent>
                <form onSubmit={handleSubmit} className="space-y-6">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <Input
                      label="Full Name"
                      name="name"
                      value={formData.name}
                      onChange={handleChange}
                      required
                      placeholder="Your Name"
                    />
                    <Input
                      label="Email Address"
                      name="email"
                      type="email"
                      value={formData.email}
                      onChange={handleChange}
                      required
                      placeholder="you@email.com"
                    />
                  </div>

                  <Input
                    label="Phone Number"
                    name="phone"
                    type="tel"
                    value={formData.phone}
                    onChange={handleChange}
                    placeholder="(555) 123-4567"
                  />

                  <div>
                    <label className="block text-sm font-medium text-navy-900 mb-1">
                      Service Needed <span className="text-red-500">*</span>
                    </label>
                    <select
                      name="service"
                      value={formData.service}
                      onChange={handleChange}
                      required
                      className="w-full px-4 py-3 text-base border border-gray-300 rounded-md shadow-sm focus:border-navy-500 focus:ring-navy-500 text-gray-900 bg-white"
                    >
                      <option value="">Select a service</option>
                      <option value="mini-move">Mini Move</option>
                      <option value="standard-delivery">Standard Delivery</option>
                      <option value="blade-luggage">BLADE Luggage</option>
                      <option value="storage">Storage</option>
                      <option value="south-florida">South Florida Delivery</option>
                      <option value="custom">Custom Service</option>
                      <option value="other">Other</option>
                    </select>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-navy-900 mb-1">
                      Tell Us About Your Needs <span className="text-red-500">*</span>
                    </label>
                    <textarea
                      name="message"
                      value={formData.message}
                      onChange={handleChange}
                      required
                      rows={5}
                      placeholder="Describe what you need delivered, pickup/delivery locations, dates, etc."
                      className="w-full px-4 py-3 text-base border border-gray-300 rounded-md shadow-sm focus:border-navy-500 focus:ring-navy-500 text-gray-900 bg-white resize-vertical"
                    />
                  </div>

                  <Button
                    type="submit"
                    variant="primary"
                    size="lg"
                    disabled={isSubmitting}
                    className="w-full"
                  >
                    {isSubmitting ? 'Sending...' : 'Send Message'}
                  </Button>
                </form>
              </CardContent>
            </Card>
          </div>

          {/* Contact Information */}
          <div className="space-y-8">
            {/* Direct Contact */}
            <Card variant="luxury">
              <CardHeader>
                <h3 className="text-xl font-serif font-bold text-navy-900">
                  Get in Touch Directly
                </h3>
              </CardHeader>
              <CardContent>
                <div className="space-y-6">
                  <div>
                    <h4 className="font-medium text-navy-900 mb-2">Email</h4>
                    <p className="text-navy-700">
                      <a href="mailto:info@totetaxi.com" className="hover:underline text-lg">
                        info@totetaxi.com
                      </a>
                    </p>
                  </div>

                  <div>
                    <h4 className="font-medium text-navy-900 mb-2">Phone</h4>
                    <p className="text-navy-700">
                      <a href="tel:631-595-5100" className="hover:underline text-lg">
                        631-595-5100
                      </a>
                    </p>
                    <p className="text-sm text-navy-600 mt-1">
                      <em>For Courier Service – Priority Delivery, please call us.</em>
                    </p>
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Service Areas */}
            <Card variant="elevated">
              <CardHeader>
                <h3 className="text-xl font-serif font-bold text-navy-900">
                  Our Service Areas
                </h3>
              </CardHeader>
              <CardContent>
                <p className="text-navy-700 mb-4">
                  <strong>Tote Taxi is a same-day door-to-door delivery service</strong> covering:
                </p>
                <ul className="space-y-2 text-navy-700">
                  <li>• <strong>The Hamptons</strong> (all areas)</li>
                  <li>• <strong>NYC</strong> (Manhattan, Brooklyn, and more)</li>
                  <li>• <strong>All Major NY Airports</strong> (JFK, LGA, EWR)</li>
                  <li>• <strong>Connecticut</strong></li>
                  <li>• <strong>South Florida</strong> (Palm Beach, Miami, Boca Raton, Jupiter, Fort Lauderdale)</li>
                </ul>
                <p className="text-sm text-navy-600 mt-4">
                  <strong>Custom deliveries and services are available upon request.</strong>
                </p>
              </CardContent>
            </Card>

            {/* Special Inquiries */}
            <Card variant="default" className="border-gold-200 bg-gold-50">
              <CardContent>
                <div className="text-center">
                  <h3 className="text-lg font-medium text-navy-900 mb-3">
                    Marketing & PR Inquiries
                  </h3>
                  <p className="text-navy-700 text-sm mb-4">
                    For partnership opportunities and media inquiries, please contact us directly.
                  </p>
                  <Link href="mailto:info@totetaxi.com?subject=Marketing%20Inquiry">
                    <Button variant="outline" size="sm">
                      Contact for Partnerships
                    </Button>
                  </Link>
                </div>
              </CardContent>
            </Card>

            {/* Quick Booking CTA */}
            <Card variant="luxury">
              <CardContent>
                <div className="text-center">
                  <h3 className="text-lg font-medium text-navy-900 mb-3">
                    Ready to Book?
                  </h3>
                  <p className="text-navy-700 text-sm mb-4">
                    Skip the contact form and start your delivery booking directly.
                  </p>
                  <Link href="/book">
                    <Button variant="primary" className="w-full">
                      Book Now
                    </Button>
                  </Link>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </MainLayout>
  );
}
```

# ==== src/app/dashboard/bookings/page.tsx ====

```
// frontend/src/app/dashboard/bookings/page.tsx
'use client';

import { useEffect } from 'react';
import { useAuthStore } from '@/stores/auth-store';
import { useRouter } from 'next/navigation';
import { MainLayout } from '@/components/layout/main-layout';
import { BookingHistory } from '@/components/dashboard/booking-history';
import { Button } from '@/components/ui/button';
import { ArrowLeftIcon } from '@heroicons/react/24/outline';

export default function BookingHistoryPage() {
  const { isAuthenticated } = useAuthStore();
  const router = useRouter();

  useEffect(() => {
    if (!isAuthenticated) {
      router.push('/login');
    }
  }, [isAuthenticated, router]);

  if (!isAuthenticated) {
    return null;
  }

  return (
    <MainLayout>
      <div className="min-h-screen bg-gradient-to-br from-cream-50 to-cream-100 py-8">
        <div className="container mx-auto px-4 max-w-6xl">
          {/* Back Button */}
          <Button
            variant="ghost"
            onClick={() => router.push('/dashboard')}
            className="mb-6"
          >
            <ArrowLeftIcon className="h-4 w-4 mr-2" />
            Back to Dashboard
          </Button>

          <BookingHistory />
        </div>
      </div>
    </MainLayout>
  );
}
```

# ==== src/app/dashboard/page.tsx ====

```
// frontend/src/app/dashboard/page.tsx  
'use client';

import { useEffect } from 'react';
import { useAuthStore } from '@/stores/auth-store';
import { useRouter, useSearchParams } from 'next/navigation';
import { MainLayout } from '@/components/layout/main-layout';
import { DashboardOverview } from '@/components/dashboard/dashboard-overview';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';

export default function DashboardPage() {
  const { user, isAuthenticated, clearAuth } = useAuthStore();
  const router = useRouter();
  const searchParams = useSearchParams();
  const isWelcome = searchParams.get('welcome') === 'true';

  useEffect(() => {
    if (!isAuthenticated) {
      router.push('/login');
    }
  }, [isAuthenticated, router]);

  if (!isAuthenticated || !user) {
    return (
      <MainLayout>
        <div className="min-h-screen bg-gradient-to-br from-cream-50 to-cream-100 flex items-center justify-center">
          <div className="text-navy-700">Loading...</div>
        </div>
      </MainLayout>
    );
  }

  return (
    <MainLayout>
      <div className="min-h-screen bg-gradient-to-br from-cream-50 to-cream-100 py-8">
        <div className="container mx-auto px-4 max-w-6xl">
          {/* Welcome Message for New Users */}
          {isWelcome && (
            <Card variant="luxury" className="mb-8 border-gold-200 bg-gold-50">
              <CardContent className="p-6 text-center">
                <h2 className="text-xl font-serif font-bold text-navy-900 mb-2">
                  Welcome to ToteTaxi, {user.first_name}!
                </h2>
                <p className="text-navy-700 mb-4">
                  Your account has been created successfully. Ready to book your first luxury move?
                </p>
                <Button variant="primary" onClick={() => router.push('/book')}>
                  Book Your First Move
                </Button>
              </CardContent>
            </Card>
          )}

          {/* Header */}
          <div className="text-center mb-8">
            <h1 className="text-3xl font-serif font-bold text-navy-900 mb-2">
              Welcome back, {user.first_name}!
            </h1>
            <p className="text-navy-700">
              Your ToteTaxi account dashboard
            </p>
          </div>

          {/* Dashboard Content */}
          <DashboardOverview />

          {/* Quick Actions */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mt-8">
            <Card>
              <CardContent className="p-6 text-center">
                <h3 className="text-lg font-medium text-navy-900 mb-4">Book a Move</h3>
                <p className="text-sm text-navy-700 mb-4">
                  Schedule your next ToteTaxi delivery or move
                </p>
                <Button 
                  variant="primary" 
                  onClick={() => router.push('/book')}
                  className="w-full"
                >
                  Book Now
                </Button>
              </CardContent>
            </Card>

            <Card>
              <CardContent className="p-6 text-center">
                <h3 className="text-lg font-medium text-navy-900 mb-4">Manage Addresses</h3>
                <p className="text-sm text-navy-700 mb-4">
                  Save addresses for faster future bookings
                </p>
                <Button 
                  variant="outline" 
                  className="w-full"
                  onClick={() => alert('Address management coming soon!')}
                >
                  Manage Addresses
                </Button>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </MainLayout>
  );
}
```

# ==== src/app/faq/page.tsx ====

```
// frontend/src/app/faq/page.tsx - Real Tote Taxi FAQ content
'use client';

import { useState } from 'react';
import { MainLayout } from '@/components/layout/main-layout';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import Link from 'next/link';

interface FAQItem {
  question: string;
  answer: string;
  category: 'general' | 'service' | 'mini-moves' | 'booking';
}

const faqData: FAQItem[] = [
  // General
  {
    category: 'general',
    question: 'What areas do you currently service?',
    answer: 'We currently service the Hamptons, NYC and surrounding areas (by zipcode), and South Florida (by zipcode). If you don\'t see your zipcode or location listed as an option, you can always contact us for a custom quote. Certain zip codes surrounding our service areas may be an additional fee.'
  },
  {
    category: 'general',
    question: 'Do you handle airport baggage transportation?',
    answer: 'Yes. We deliver to JFK, LGA, EWR & Westchester FBO\'s. Please contact us for specific arrangements.'
  },
  {
    category: 'general',
    question: 'What about insurance coverage?',
    answer: 'Our total liability for items lost or damaged is half the purchase price of each item up to $150. For additional coverage, $100 extra covers your order for $1,000. TOTE TAXI assumes no responsibility for: money, negotiable papers, securities, business documents, irreplaceable books, manuscripts, photographic or electronic equipment, computers, jewelry, watches, eyeglasses, silverware, china, precious metals, heirlooms, furs, tobacco products, antiques, artifacts, paintings and other works of art, medicines, human organs, commercial items, cosmetics, samples, or any similar valuable or fragile items.'
  },
  {
    category: 'general',
    question: 'Do I need to tip the driver?',
    answer: 'Tipping is not required, but is greatly appreciated by the drivers.'
  },
  {
    category: 'general',
    question: 'Do you offer any discounts?',
    answer: 'We can offer a discount if you are paying via bank transfer, cash, or if you refer someone who books Tote Taxi. Please call or email for more information.'
  },
  {
    category: 'general',
    question: 'Do you offer daily luggage storage?',
    answer: 'Yes, this service is offered at 395 County Road, 39A. It\'s $20/day. Please call or email us to schedule.'
  },
  
  // Service Details
  {
    category: 'service',
    question: 'What happens if I\'m late to give my bag? How long will you wait?',
    answer: 'If there is a problem we will call/text you directly. Tote Taxi will wait up to 10 minutes to receive the bag. If the delivery is missed you will be charged an additional $20.'
  },
  {
    category: 'service',
    question: 'Can I leave my bag outside my door if I\'m not home?',
    answer: 'Yes. If you are not home, please leave the items in a safe place. Use the instruction form to inform us of pickup/delivery instructions.'
  },
  {
    category: 'service',
    question: 'I\'m staying in a hotel - where should I leave my bag?',
    answer: 'Go ahead and leave it at the front desk – the hotel will give you a claim ticket. Please respond to your confirmation email with a photo of the claim ticket.'
  },
  {
    category: 'service',
    question: 'Do you have a drop-off or pick-up location?',
    answer: 'Everything is delivered door-to-door. If you need this option, our office is at 395 County Road 39A, Southampton, NY 11968. Contact us for details.'
  },
  {
    category: 'service',
    question: 'Where will the driver meet me?',
    answer: 'Please have the person handing us the bag meet us on the first floor. We will contact you directly when we have arrived at your address.'
  },
  {
    category: 'service',
    question: 'Do I have to label my bag?',
    answer: 'Yes, please label the bag with the name on the order. We also highly recommend that you number your pieces (example: #3 of 5 pieces). Labels are available upon request.'
  },
  {
    category: 'service',
    question: 'When will my bag arrive in NYC/The Hamptons?',
    answer: 'Items are picked up in the mornings between 8am-11:30am and delivered before 6pm. When the driver is headed to your pickup/drop-off you will receive tracking information.'
  },
  {
    category: 'service',
    question: 'Do you offer local Hamptons service from retail stores?',
    answer: 'As a traditional courier, we can pick up and deliver items for you around the Hamptons.'
  },
  
  // Mini Moves
  {
    category: 'mini-moves',
    question: 'What is a mini move?',
    answer: 'A mini-move is a luxurious and worry-free solution for transporting a larger amount of luggage and other small items in a carefree way — to and from your destination in NYC, the Hamptons, and South Florida.'
  },
  {
    category: 'mini-moves',
    question: 'What is the difference between a Mini Move, Petite Move, and a Full Move?',
    answer: 'We suggest move types based on the number of individuals in a family: • Petite Move: Ideal for a family of 3- with 8-15 pieces • Mini Move (Standard): Our most popular option, ideal for a family of 5- with 15-30 pieces • Full Move: For larger families of 6+ with 50-60 pieces. Note: mini move packages do not include Peloton transport.'
  },
  {
    category: 'mini-moves',
    question: 'What do I need to know about transporting a Peloton?',
    answer: 'We ask that you please remove the screen from the bike before transport.'
  },
  {
    category: 'mini-moves',
    question: 'I have an item that is not listed on the website - how do I know how much it will cost?',
    answer: 'If you have a custom order please email us at info@totetaxi.com or call 631-595-5100. We work on custom orders and can provide a quote based on your specific needs.'
  },
  {
    category: 'mini-moves',
    question: 'Are there any additional fees with the Mini Move?',
    answer: 'There can be additional fees: if you give us more items than originally stated, if your items are not ready for pickup and/or drivers are required to wait more than 30 minutes (on either end) an hourly rate will accrue and be added to the Mini Move.'
  },
  {
    category: 'mini-moves',
    question: 'Can you provide us with a COI (Certificate of Insurance)?',
    answer: 'Yes, please send a sample COI for the building to info@totetaxi.com. It is $50 extra. We need to know when the pickup is scheduled if the building requires a COI.'
  },
  
  // Booking
  {
    category: 'booking',
    question: 'If I want to add a bag last minute can I?',
    answer: 'Tote Taxi can take as many bags as needed/requested by the client. Please inform the messenger of the change - we\'ll be able to properly document the delivery request in our system. The card on file will be billed for any additional items.'
  },
  {
    category: 'booking',
    question: 'What is your cancellation policy?',
    answer: 'You must cancel within 48 hours of booking for a full refund. This does not apply for holiday weekends or sold-out dates. Credit will be issued for any cancellations.'
  },
  {
    category: 'booking',
    question: 'How do I edit my order?',
    answer: 'Please email us at orders@totetaxi.com. We will gladly assist you with any changes.'
  }
];

const categories = {
  general: 'General Information',
  service: 'Service Details',
  'mini-moves': 'Mini Moves',
  booking: 'Booking & Orders'
};

export default function FAQPage() {
  const [activeCategory, setActiveCategory] = useState<string>('general');
  const [openQuestions, setOpenQuestions] = useState<Set<number>>(new Set());

  const toggleQuestion = (index: number) => {
    const newOpenQuestions = new Set(openQuestions);
    if (newOpenQuestions.has(index)) {
      newOpenQuestions.delete(index);
    } else {
      newOpenQuestions.add(index);
    }
    setOpenQuestions(newOpenQuestions);
  };

  const filteredFAQs = faqData.filter(faq => faq.category === activeCategory);

  return (
    <MainLayout>
      <div className="container mx-auto px-4 py-16">
        {/* Hero Section */}
        <div className="text-center mb-16">
          <h1 className="text-4xl md:text-5xl font-serif font-bold text-navy-900 mb-6">
            Frequently Asked Questions
          </h1>
          <p className="text-xl text-navy-700 max-w-3xl mx-auto mb-4">
            Everything you need to know about Tote Taxi's delivery service.
          </p>
          <p className="text-lg text-navy-600">
            Can't find what you're looking for? <Link href="/contact" className="text-navy-900 hover:underline">Contact us</Link> for personalized assistance.
          </p>
        </div>

        {/* Category Filter */}
        <div className="flex flex-wrap justify-center gap-4 mb-12">
          {Object.entries(categories).map(([key, label]) => (
            <button
              key={key}
              onClick={() => setActiveCategory(key)}
              className={`px-6 py-3 rounded-lg font-medium transition-all ${
                activeCategory === key
                  ? 'bg-navy-900 text-white'
                  : 'bg-white text-navy-700 border border-gray-200 hover:border-navy-300'
              }`}
            >
              {label}
            </button>
          ))}
        </div>

        {/* FAQ Content */}
        <div className="max-w-4xl mx-auto mb-16">
          <div className="space-y-4">
            {filteredFAQs.map((faq, index) => (
              <Card key={index} variant="elevated">
                <CardContent>
                  <button
                    onClick={() => toggleQuestion(index)}
                    className="w-full text-left py-4 flex justify-between items-start"
                  >
                    <h3 className="text-lg font-medium text-navy-900 pr-4">
                      {faq.question}
                    </h3>
                    <span className={`text-navy-900 transition-transform flex-shrink-0 ${
                      openQuestions.has(index) ? 'rotate-180' : ''
                    }`}>
                      ↓
                    </span>
                  </button>
                  {openQuestions.has(index) && (
                    <div className="pb-4 pt-2 border-t border-gray-100">
                      <div className="text-navy-700 leading-relaxed whitespace-pre-line">
                        {faq.answer}
                      </div>
                    </div>
                  )}
                </CardContent>
              </Card>
            ))}
          </div>
        </div>

        {/* Important Notes */}
        <section className="mb-16">
          <h2 className="text-2xl font-serif font-bold text-navy-900 text-center mb-8">
            Important Information
          </h2>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
            <Card variant="default" className="border-red-200 bg-red-50">
              <CardContent>
                <h3 className="font-medium text-navy-900 mb-3">Liability Limitations</h3>
                <p className="text-navy-700 text-sm leading-relaxed">
                  In consideration of the rate charged, it is agreed that the value of shipments 
                  is not greater than $150.00 unless a greater value is declared and insurance 
                  purchased at the time the order is placed. All claims for loss or damage must 
                  be submitted verbally within 24 hours and in writing by certified mail within 
                  30 days of pickup or delivery.
                </p>
              </CardContent>
            </Card>

            <Card variant="default" className="border-gold-200 bg-gold-50">
              <CardContent>
                <h3 className="font-medium text-navy-900 mb-3">Office Location</h3>
                <div className="text-navy-700 text-sm">
                  <p className="mb-2"><strong>395 County Road 39A</strong></p>
                  <p className="mb-2">Southampton, NY 11968</p>
                  <p className="mb-2">Daily luggage storage available: $20/day</p>
                  <p>Contact us to arrange pickup/drop-off</p>
                </div>
              </CardContent>
            </Card>
          </div>
        </section>

        {/* Items We Cannot Transport */}
        <section className="mb-16">
          <Card variant="elevated">
            <CardContent>
              <h2 className="text-2xl font-serif font-bold text-navy-900 mb-6 text-center">
                Items We Cannot Transport
              </h2>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <h3 className="font-medium text-navy-900 mb-3">Prohibited Items Include:</h3>
                  <ul className="space-y-1 text-navy-700 text-sm">
                    <li>• Dangerous goods or hazardous materials</li>
                    <li>• Explosives, fireworks, flammable goods</li>
                    <li>• Cash, coins, currency, negotiable instruments</li>
                    <li>• Human or animal remains</li>
                    <li>• Lottery tickets and gambling devices</li>
                    <li>• Pornographic materials</li>
                    <li>• Tobacco products and cigarettes</li>
                    <li>• Prescription drugs (with limited exceptions)</li>
                  </ul>
                </div>
                <div>
                  <h3 className="font-medium text-navy-900 mb-3">Additional Restrictions:</h3>
                  <ul className="space-y-1 text-navy-700 text-sm">
                    <li>• Perishable foods requiring refrigeration</li>
                    <li>• Live plants and cut flowers</li>
                    <li>• Containers of liquids over 8 gallons</li>
                    <li>• Used gasoline tanks or gasoline-powered devices</li>
                    <li>• Packages that are wet, leaking, or emit odors</li>
                    <li>• Items requiring special licenses or permits</li>
                    <li>• Merchandise from sanctioned countries</li>
                    <li>• Switchblades and certain knives</li>
                  </ul>
                </div>
              </div>
              <p className="text-center text-navy-600 text-sm mt-6">
                If you're unsure about an item, please contact us before booking.
              </p>
            </CardContent>
          </Card>
        </section>

        {/* Still Have Questions */}
        <div className="text-center">
          <Card variant="luxury">
            <CardContent>
              <h2 className="text-2xl font-serif font-bold text-navy-900 mb-4">
                Still Have Questions?
              </h2>
              <p className="text-navy-700 mb-6 max-w-2xl mx-auto">
                Our Customer Service Team is available to help with any questions. 
                We're here to make your delivery experience seamless.
              </p>
              <div className="flex flex-col sm:flex-row gap-4 justify-center">
                <Link href="/contact">
                  <Button variant="primary" size="lg">
                    Contact Us
                  </Button>
                </Link>
                <Link href="mailto:info@totetaxi.com">
                  <Button variant="outline" size="lg">
                    Email: info@totetaxi.com
                  </Button>
                </Link>
                <Link href="tel:631-595-5100">
                  <Button variant="outline" size="lg">
                    Call: 631-595-5100
                  </Button>
                </Link>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </MainLayout>
  );
}
```

# ==== src/app/globals.css ====

```
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --background: #ffffff;
  --foreground: #171717;
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

body {
  background: var(--background);
  color: var(--foreground);
  font-family: var(--font-inter), Arial, Helvetica, sans-serif;
}

/* Custom utility classes for luxury design */
@layer components {
  .luxury-card-shadow {
    @apply shadow-lg shadow-navy-900/10 hover:shadow-xl hover:shadow-navy-900/20 transition-shadow duration-300;
  }
  
  .gradient-gold {
    @apply bg-gradient-to-r from-gold-400 to-gold-600;
  }
}
```

# ==== src/app/layout.tsx ====

```
// frontend/src/app/layout.tsx
import type { Metadata } from "next";
import { Inter, Playfair_Display } from "next/font/google";
import "./globals.css";
import { QueryProvider } from "@/components/providers/query-provider";

const inter = Inter({ subsets: ["latin"], variable: '--font-inter' });
const playfair = Playfair_Display({ subsets: ["latin"], variable: '--font-playfair' });

export const metadata: Metadata = {
  title: "ToteTaxi - Luxury Delivery to the Hamptons",
  description: "Premium delivery service for Manhattan to Hamptons transport. From suitcases to surfboards, we handle your seasonal relocation with luxury and care.",
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en" className={`${inter.variable} ${playfair.variable}`}>
      <body className={inter.className}>
        <QueryProvider>
          {children}
        </QueryProvider>
      </body>
    </html>
  );
}
```

# ==== src/app/login/page.tsx ====

```
// frontend/src/app/login/page.tsx
import { MainLayout } from '@/components/layout/main-layout';
import { LoginForm } from '@/components/auth/login-form';

export default function LoginPage() {
  return (
    <MainLayout>
      <div className="min-h-screen bg-gradient-to-br from-cream-50 to-cream-100 py-16">
        <div className="container mx-auto px-4">
          <LoginForm />
        </div>
      </div>
    </MainLayout>
  );
}
```

# ==== src/app/page.tsx ====

```
// frontend/src/app/page.tsx - Using real ToteTaxi information
'use client';

import { useState } from 'react';
import { MainLayout } from '@/components/layout/main-layout';
import { ServiceShowcase } from '@/components/marketing/service-showcase';
import { TestAPIConnection } from '@/components/test-api-connection';
import { BookingWizard } from '@/components/booking';
import { Button } from '@/components/ui/button';
import { Modal } from '@/components/ui/modal';
import { Card, CardContent } from '@/components/ui/card';
import Link from 'next/link';

export default function Home() {
  const [showBookingWizard, setShowBookingWizard] = useState(false);

  const openBookingWizard = () => {
    setShowBookingWizard(true);
  };

  const closeBookingWizard = () => {
    setShowBookingWizard(false);
  };

  return (
    <>
      <MainLayout onBookNowClick={openBookingWizard}>
        {/* Hero Section */}
        <section className="py-24 bg-gradient-to-br from-cream-50 to-cream-100">
          <div className="container mx-auto px-4 text-center">
            <h1 className="text-5xl md:text-6xl font-serif font-bold text-navy-900 mb-6">
              Door-to-Door Delivery Service
            </h1>
            <p className="text-xl text-navy-700 mb-4 max-w-3xl mx-auto">
              Tote Taxi will deliver your luggage to and from the city stress-free.
            </p>
            <p className="text-lg text-navy-600 mb-8 max-w-2xl mx-auto">
              From suitcases to surfboards, Pelotons to pop-up props — we handle it all between 
              NYC, the Hamptons, South Florida, and all major airports.
            </p>
            <div className="flex flex-col sm:flex-row gap-4 justify-center">
              <Button variant="primary" size="lg" onClick={openBookingWizard}>
                Book Now
              </Button>
              <Link href="/services">
                <Button variant="outline" size="lg">
                  View Services & Pricing
                </Button>
              </Link>
            </div>
          </div>
        </section>

        {/* How It Works - Simple 3 Step */}
        <section className="py-16 bg-white">
          <div className="container mx-auto px-4">
            <h2 className="text-3xl font-serif font-bold text-navy-900 text-center mb-12">
              Same Day Delivery Made Stress-Free
            </h2>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
              <Card variant="elevated">
                <CardContent>
                  <div className="text-center">
                    <div className="text-4xl mb-4">📱</div>
                    <h3 className="text-xl font-medium text-navy-900 mb-3">Pickup</h3>
                    <p className="text-navy-700">Schedule a pickup and we'll come to you.</p>
                  </div>
                </CardContent>
              </Card>
              <Card variant="elevated">
                <CardContent>
                  <div className="text-center">
                    <div className="text-4xl mb-4">✈️</div>
                    <h3 className="text-xl font-medium text-navy-900 mb-3">Travel</h3>
                    <p className="text-navy-700">You travel hands-free. Très chic!</p>
                  </div>
                </CardContent>
              </Card>
              <Card variant="elevated">
                <CardContent>
                  <div className="text-center">
                    <div className="text-4xl mb-4">🚚</div>
                    <h3 className="text-xl font-medium text-navy-900 mb-3">Delivery</h3>
                    <p className="text-navy-700">We'll deliver to your desired destination.</p>
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>
        </section>

        {/* API Connection Status - Remove this in production */}
        <div className="container mx-auto px-4 py-8">
          <TestAPIConnection />
        </div>

        {/* Service Showcase */}
        <ServiceShowcase />

        {/* Customer Testimonials */}
        <section className="py-16 bg-cream-50">
          <div className="container mx-auto px-4">
            <h2 className="text-3xl font-serif font-bold text-navy-900 text-center mb-12">
              What Our Customers Say
            </h2>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              <Card variant="elevated">
                <CardContent>
                  <p className="text-navy-700 text-sm mb-4">
                    "I've heard amazing things about Tote Taxi for awhile now and finally used it for 
                    the first time today when I took Blade from JFK to Manhattan and LOVED it! 
                    It was so easy and seamless!"
                  </p>
                  <p className="font-medium text-navy-900">- Natalie M.</p>
                </CardContent>
              </Card>
              
              <Card variant="elevated">
                <CardContent>
                  <p className="text-navy-700 text-sm mb-4">
                    "We have been using Tote Taxi for the last three years when we come out to 
                    East Hampton and when we head back to the city. They've always been wonderful! 
                    Makes moving bikes and extras easy and stress free!"
                  </p>
                  <p className="font-medium text-navy-900">- Kimberly R.</p>
                </CardContent>
              </Card>
              
              <Card variant="elevated">
                <CardContent>
                  <p className="text-navy-700 text-sm mb-4">
                    "Tote Taxi was a lifesaver! They were so easy to coordinate with, showed up 
                    exactly on time, communicated well. I highly recommend their services."
                  </p>
                  <p className="font-medium text-navy-900">- Robyn M.</p>
                </CardContent>
              </Card>
            </div>
          </div>
        </section>

        {/* Service Areas */}
        <section className="py-16 bg-white">
          <div className="container mx-auto px-4">
            <div className="text-center mb-12">
              <h2 className="text-3xl font-serif font-bold text-navy-900 mb-4">
                Where We Deliver
              </h2>
              <p className="text-lg text-navy-700">
                Comprehensive delivery service across multiple locations
              </p>
            </div>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8">
              <div className="text-center">
                <div className="text-4xl mb-4">🏙️</div>
                <h3 className="font-medium text-navy-900 mb-2">NYC</h3>
                <p className="text-navy-600 text-sm">Manhattan, Brooklyn, and surrounding areas</p>
              </div>
              <div className="text-center">
                <div className="text-4xl mb-4">🏖️</div>
                <h3 className="font-medium text-navy-900 mb-2">The Hamptons</h3>
                <p className="text-navy-600 text-sm">East Hampton, Southampton, Montauk, and more</p>
              </div>
              <div className="text-center">
                <div className="text-4xl mb-4">✈️</div>
                <h3 className="font-medium text-navy-900 mb-2">NYC Airports</h3>
                <p className="text-navy-600 text-sm">JFK, LaGuardia, Newark</p>
              </div>
              <div className="text-center">
                <div className="text-4xl mb-4">🌴</div>
                <h3 className="font-medium text-navy-900 mb-2">South Florida</h3>
                <p className="text-navy-600 text-sm">Palm Beach, Miami, Boca Raton, Jupiter</p>
              </div>
            </div>
          </div>
        </section>

        {/* Partnerships */}
        <section className="py-16 bg-cream-50">
          <div className="container mx-auto px-4">
            <div className="text-center mb-12">
              <h2 className="text-3xl font-serif font-bold text-navy-900 mb-4">
                Trusted Partners
              </h2>
            </div>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
              <div className="text-center">
                <div className="text-4xl mb-4">🚁</div>
                <h3 className="font-medium text-navy-900 mb-2">BLADE</h3>
                <p className="text-navy-600 text-sm">Official luggage delivery partner for helicopter transfers</p>
              </div>
              <div className="text-center">
                <div className="text-4xl mb-4">📚</div>
                <h3 className="font-medium text-navy-900 mb-2">Cultured Magazine</h3>
                <p className="text-navy-600 text-sm">Trusted delivery partner</p>
              </div>
              <div className="text-center">
                <div className="text-4xl mb-4">🧳</div>
                <h3 className="font-medium text-navy-900 mb-2">Luggage Free</h3>
                <p className="text-navy-600 text-sm">Partner in luggage logistics</p>
              </div>
            </div>
          </div>
        </section>

        {/* Call-to-Action Section */}
        <section className="py-16 bg-navy-900 text-white">
          <div className="container mx-auto px-4 text-center">
            <h2 className="text-3xl font-serif font-bold mb-4">
              Ready to Travel Hands-Free?
            </h2>
            <p className="text-xl text-navy-200 mb-8 max-w-2xl mx-auto">
              Join thousands of satisfied customers who trust Tote Taxi for stress-free delivery service.
            </p>
            <Button 
              variant="secondary" 
              size="lg"
              onClick={openBookingWizard}
            >
              Book Now
            </Button>
          </div>
        </section>
      </MainLayout>

      {/* Booking Wizard Modal */}
      <Modal
        isOpen={showBookingWizard}
        onClose={closeBookingWizard}
        size="full"
        className="max-w-6xl"
        showCloseButton={true}
      >
        <BookingWizard />
      </Modal>
    </>
  );
}
```

# ==== src/app/register/page.tsx ====

```
// frontend/src/app/register/page.tsx
import { MainLayout } from '@/components/layout/main-layout';
import { RegisterForm } from '@/components/auth/register-form';

export default function RegisterPage() {
  return (
    <MainLayout>
      <div className="min-h-screen bg-gradient-to-br from-cream-50 to-cream-100 py-16">
        <div className="container mx-auto px-4">
          <RegisterForm />
        </div>
      </div>
    </MainLayout>
  );
}
```

# ==== src/app/services/page.tsx ====

```
// frontend/src/app/services/page.tsx
'use client';

import { useQuery } from '@tanstack/react-query';
import { apiClient } from '@/lib/api-client';
import { MainLayout } from '@/components/layout/main-layout';
import { Card, CardContent, CardHeader } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import Link from 'next/link';
import type { ServiceCatalog } from '@/types';

export default function ServicesPage() {
  const { data: services, isLoading } = useQuery({
    queryKey: ['services', 'catalog'],
    queryFn: async (): Promise<ServiceCatalog> => {
      const response = await apiClient.get('/api/public/services/');
      return response.data;
    }
  });

  if (isLoading) {
    return (
      <MainLayout>
        <div className="container mx-auto px-4 py-16">
          <div className="animate-pulse space-y-8">
            <div className="h-12 bg-navy-200 rounded w-1/2 mx-auto"></div>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
              {[1, 2, 3].map(i => (
                <div key={i} className="h-64 bg-navy-200 rounded"></div>
              ))}
            </div>
          </div>
        </div>
      </MainLayout>
    );
  }

  return (
    <MainLayout>
      <div className="container mx-auto px-4 py-16">
        {/* Hero Section */}
        <div className="text-center mb-16">
          <h1 className="text-4xl md:text-5xl font-serif font-bold text-navy-900 mb-6">
            Our Luxury Services
          </h1>
          <p className="text-xl text-navy-700 max-w-3xl mx-auto">
            From weekend essentials to full seasonal relocations, we provide white-glove service 
            tailored to your Manhattan-to-Hamptons lifestyle.
          </p>
        </div>

        {/* Mini Moves - Featured Section */}
        <section className="mb-20">
          <div className="text-center mb-12">
            <h2 className="text-3xl font-serif font-bold text-navy-900 mb-4">Mini Moves</h2>
            <p className="text-lg text-navy-700 max-w-2xl mx-auto">
              Complete packages designed for seasonal relocation. Everything you need for your Hamptons move, 
              professionally handled from door to door.
            </p>
          </div>

          <div className="grid grid-cols-1 lg:grid-cols-3 gap-8 mb-12">
            {services?.mini_move_packages?.map((pkg) => (
              <Card 
                key={pkg.id} 
                variant={pkg.is_most_popular ? "luxury" : "elevated"}
                className="relative"
              >
                {pkg.is_most_popular && (
                  <div className="absolute -top-3 left-1/2 transform -translate-x-1/2">
                    <span className="bg-gold-500 text-navy-900 px-4 py-1 rounded-full text-sm font-medium">
                      Most Popular
                    </span>
                  </div>
                )}
                
                <CardHeader>
                  <div className="text-center">
                    <h3 className="text-2xl font-serif font-bold text-navy-900 mb-2">
                      {pkg.name}
                    </h3>
                    <div className="text-4xl font-bold text-navy-900 mb-4">
                      ${pkg.base_price_dollars}
                    </div>
                    {pkg.max_items && (
                      <p className="text-navy-600">Up to {pkg.max_items} items</p>
                    )}
                  </div>
                </CardHeader>
                
                <CardContent>
                  <p className="text-navy-700 mb-6">{pkg.description}</p>
                  
                  <div className="space-y-3 mb-8">
                    <h4 className="font-medium text-navy-900">What's Included:</h4>
                    <ul className="space-y-2">
                      <li className="flex items-center text-sm text-navy-700">
                        <span className="text-green-500 mr-3">✓</span>
                        Door-to-door pickup and delivery
                      </li>
                      <li className="flex items-center text-sm text-navy-700">
                        <span className="text-green-500 mr-3">✓</span>
                        Professional handling and care
                      </li>
                      {pkg.protective_wrapping && (
                        <li className="flex items-center text-sm text-navy-700">
                          <span className="text-green-500 mr-3">✓</span>
                          Premium protective wrapping
                        </li>
                      )}
                      {pkg.coi_included && (
                        <li className="flex items-center text-sm text-navy-700">
                          <span className="text-green-500 mr-3">✓</span>
                          Certificate of Insurance included
                        </li>
                      )}
                      {pkg.priority_scheduling && (
                        <li className="flex items-center text-sm text-navy-700">
                          <span className="text-green-500 mr-3">✓</span>
                          Priority scheduling
                        </li>
                      )}
                    </ul>
                  </div>
                  
                  <Link href="/book">
                    <Button 
                      variant={pkg.is_most_popular ? "primary" : "outline"} 
                      className="w-full"
                    >
                      Select {pkg.name}
                    </Button>
                  </Link>
                </CardContent>
              </Card>
            ))}
          </div>

          {/* Organizing Services Add-On */}
          <Card variant="luxury" className="mb-8">
            <CardHeader>
              <h3 className="text-xl font-serif font-bold text-navy-900 text-center">
                Professional Organizing Services
              </h3>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
                <div>
                  <h4 className="font-medium text-navy-900 mb-3">Professional Packing</h4>
                  <p className="text-navy-700 text-sm mb-4">
                    Our expert team carefully packs your belongings at your Manhattan location 
                    using premium materials and techniques to ensure everything arrives pristine.
                  </p>
                  <ul className="space-y-1 text-sm text-navy-600">
                    <li>• Premium packing materials included</li>
                    <li>• Careful handling of delicate items</li>
                    <li>• Efficient space optimization</li>
                  </ul>
                </div>
                <div>
                  <h4 className="font-medium text-navy-900 mb-3">Professional Unpacking</h4>
                  <p className="text-navy-700 text-sm mb-4">
                    Arrive to your Hamptons home with everything unpacked and organized exactly 
                    how you want it. We handle the setup so you can start enjoying your retreat.
                  </p>
                  <ul className="space-y-1 text-sm text-navy-600">
                    <li>• Complete unpacking and setup</li>
                    <li>• Organized placement of belongings</li>
                    <li>• Removal of all packing materials</li>
                  </ul>
                </div>
              </div>
            </CardContent>
          </Card>
        </section>

        {/* Standard Delivery */}
        {services?.standard_delivery && (
          <section className="mb-20">
            <div className="text-center mb-12">
              <h2 className="text-3xl font-serif font-bold text-navy-900 mb-4">Standard Delivery</h2>
              <p className="text-lg text-navy-700 max-w-2xl mx-auto">
                Individual item delivery for when you need specific items transported quickly and safely.
              </p>
            </div>

            <div className="max-w-4xl mx-auto">
              <Card variant="elevated">
                <CardContent>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
                    <div>
                      <div className="text-3xl font-bold text-navy-900 mb-2">
                        ${services.standard_delivery.price_per_item_dollars} per item
                      </div>
                      <p className="text-navy-600 mb-4">
                        Minimum {services.standard_delivery.minimum_items} items • 
                        ${services.standard_delivery.minimum_charge_dollars} minimum charge
                      </p>
                      
                      <div className="space-y-3">
                        <h4 className="font-medium text-navy-900">Perfect for:</h4>
                        <ul className="space-y-2 text-sm text-navy-700">
                          <li>• Individual clothing items</li>
                          <li>• Documents and files</li>
                          <li>• Small electronics</li>
                          <li>• Seasonal items under {services.standard_delivery.max_weight_per_item_lbs} lbs</li>
                        </ul>
                      </div>
                    </div>
                    
                    <div>
                      <div className="bg-gold-50 border border-gold-200 rounded-lg p-6">
                        <h4 className="font-medium text-navy-900 mb-3">Same-Day Delivery</h4>
                        <div className="text-2xl font-bold text-navy-900 mb-2">
                          ${services.standard_delivery.same_day_flat_rate_dollars}
                        </div>
                        <p className="text-sm text-navy-700 mb-4">
                          Need it today? We offer same-day delivery for urgent items.
                        </p>
                        <ul className="space-y-1 text-xs text-navy-600">
                          <li>• Order by 10 AM for same-day delivery</li>
                          <li>• Available Thursday through Monday</li>
                          <li>• Subject to availability</li>
                        </ul>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          </section>
        )}

        {/* Specialty Items */}
        {services?.specialty_items && services.specialty_items.length > 0 && (
          <section className="mb-20">
            <div className="text-center mb-12">
              <h2 className="text-3xl font-serif font-bold text-navy-900 mb-4">Specialty Items</h2>
              <p className="text-lg text-navy-700 max-w-2xl mx-auto">
                Premium handling for your most valuable and unique items. Each specialty item receives 
                custom care and attention.
              </p>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {services.specialty_items.map((item) => (
                <Card key={item.id} variant="default">
                  <CardContent>
                    <div className="text-center">
                      <h4 className="text-lg font-medium text-navy-900 mb-2">{item.name}</h4>
                      <div className="text-2xl font-bold text-navy-900 mb-3">
                        ${item.price_dollars}
                      </div>
                      <p className="text-navy-600 text-sm mb-4">{item.description}</p>
                      
                      {item.special_handling && (
                        <div className="mb-4">
                          <span className="inline-block bg-gold-100 text-gold-800 text-xs px-3 py-1 rounded-full">
                            Special Handling Included
                          </span>
                        </div>
                      )}
                      
                      {item.requires_van_schedule && (
                        <p className="text-xs text-navy-500">
                          * Requires scheduled van delivery
                        </p>
                      )}
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </section>
        )}

        {/* Service Areas */}
        <section className="mb-20">
          <Card variant="elevated">
            <CardHeader>
              <h2 className="text-2xl font-serif font-bold text-navy-900 text-center">Service Areas</h2>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
                <div>
                  <h3 className="font-medium text-navy-900 mb-3">Pickup Locations</h3>
                  <ul className="space-y-2 text-navy-700">
                    <li>• Manhattan (All neighborhoods)</li>
                    <li>• Brooklyn (Select areas)</li>
                    <li>• Long Island City</li>
                    <li>• Hoboken & Jersey City</li>
                  </ul>
                </div>
                <div>
                  <h3 className="font-medium text-navy-900 mb-3">Delivery Destinations</h3>
                  <ul className="space-y-2 text-navy-700">
                    <li>• East Hampton</li>
                    <li>• Southampton & Water Mill</li>
                    <li>• Bridgehampton & Sagaponack</li>
                    <li>• Westhampton Beach</li>
                    <li>• Sag Harbor & North Haven</li>
                    <li>• Montauk</li>
                  </ul>
                </div>
              </div>
              <div className="text-center mt-6">
                <p className="text-sm text-navy-600">
                  Don't see your location? <Link href="/contact" className="text-navy-900 hover:underline">Contact us</Link> for custom service options.
                </p>
              </div>
            </CardContent>
          </Card>
        </section>

        {/* CTA Section */}
        <div className="text-center">
          <h2 className="text-2xl font-serif font-bold text-navy-900 mb-4">
            Ready to Experience White-Glove Service?
          </h2>
          <p className="text-navy-700 mb-8 max-w-2xl mx-auto">
            Book your luxury move today and discover why discerning clients trust ToteTaxi 
            for their Manhattan-to-Hamptons transport needs.
          </p>
          <Link href="/book">
            <Button variant="primary" size="lg">
              Start Your Booking
            </Button>
          </Link>
        </div>
      </div>
    </MainLayout>
  );
}
```

# ==== src/components/auth/index.ts ====

```

```

# ==== src/components/auth/login-form.tsx ====

```
// frontend/src/components/auth/login-form.tsx
'use client';

import { useState } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { useMutation } from '@tanstack/react-query';
import { useRouter } from 'next/navigation';
import { apiClient } from '@/lib/api-client';
import { useAuthStore } from '@/stores/auth-store';
import { Card, CardContent, CardHeader } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import type { DjangoUser, CustomerProfile } from '@/types';

const loginSchema = z.object({
  email: z.string().email('Please enter a valid email address'),
  password: z.string().min(6, 'Password must be at least 6 characters'),
});

type LoginFormData = z.infer<typeof loginSchema>;

interface LoginResponse {
  message: string;
  user: DjangoUser;
  customer_profile: CustomerProfile;
  csrf_token: string;
}

export function LoginForm() {
  const router = useRouter();
  const { setAuth, setLoading } = useAuthStore();
  const [apiError, setApiError] = useState<string>('');
  const [debugInfo, setDebugInfo] = useState<any>(null);

  const {
    register,
    handleSubmit,
    formState: { errors, isSubmitting },
  } = useForm<LoginFormData>({
    resolver: zodResolver(loginSchema),
  });

  const loginMutation = useMutation({
    mutationFn: async (data: LoginFormData): Promise<LoginResponse> => {
      console.log('🔍 SENDING LOGIN REQUEST');
      console.log('📤 Request data:', data);
      console.log('🌐 API Base URL:', apiClient.defaults.baseURL);
      console.log('🍪 Request config:', {
        withCredentials: apiClient.defaults.withCredentials,
        headers: apiClient.defaults.headers
      });
      
      const response = await apiClient.post('/api/customer/auth/login/', data);
      
      console.log('📥 RAW RESPONSE:', {
        status: response.status,
        statusText: response.statusText,
        headers: response.headers,
        data: response.data
      });
      
      return response.data;
    },
    onSuccess: (data) => {
      console.log('🎉 LOGIN SUCCESS!');
      console.log('✅ Response data:', JSON.stringify(data, null, 2));
      console.log('👤 User data:', data.user);
      console.log('📋 Profile data:', data.customer_profile);
      
      setDebugInfo({
        success: true,
        response: data,
        timestamp: new Date().toISOString()
      });
      
      try {
        // Set auth with correct types
        setAuth(data.user, data.customer_profile);
        console.log('✅ Auth state updated successfully');
        
        // Try to navigate
        console.log('🚀 Attempting to navigate to dashboard...');
        router.push('/dashboard');
      } catch (err) {
        const errorMessage = err instanceof Error ? err.message : 'Unknown error in success handler';
        console.error('❌ Error in onSuccess handler:', err);
        setApiError(`Success handler error: ${errorMessage}`);
      }
    },
    onError: (error: any) => {
      console.log('❌ LOGIN ERROR');
      console.log('📊 Error details:', {
        name: error.name,
        message: error.message,
        status: error.response?.status,
        statusText: error.response?.statusText,
        data: error.response?.data,
        headers: error.response?.headers,
        config: {
          url: error.config?.url,
          method: error.config?.method,
          data: error.config?.data
        }
      });
      
      setDebugInfo({
        success: false,
        error: {
          status: error.response?.status,
          data: error.response?.data,
          message: error.message
        },
        timestamp: new Date().toISOString()
      });
      
      const errorMessage = error.response?.data?.error || 
                          error.response?.data?.detail || 
                          error.response?.data?.message ||
                          'Login failed. Please check your credentials.';
      setApiError(errorMessage);
      setLoading(false);
    },
  });

  const onSubmit = async (data: LoginFormData) => {
    console.log('🚀 FORM SUBMITTED');
    console.log('📝 Form data:', data);
    
    setApiError('');
    setDebugInfo(null);
    setLoading(true);
    
    try {
      loginMutation.mutate(data);
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Unknown submit error';
      console.error('❌ Submit error:', err);
      setApiError(`Submit error: ${errorMessage}`);
      setLoading(false);
    }
  };

  return (
    <div className="w-full max-w-md mx-auto space-y-4">
      <Card variant="luxury">
        <CardHeader>
          <h2 className="text-2xl font-serif font-bold text-navy-900 text-center">
            Welcome Back
          </h2>
          <p className="text-navy-700 text-center">
            Sign in to your ToteTaxi account
          </p>
        </CardHeader>

        <CardContent>
          <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
            {/* Email Field */}
            <div>
              <label htmlFor="email" className="block text-sm font-medium text-navy-900 mb-1">
                Email Address
              </label>
              <Input
                id="email"
                type="email"
                {...register('email')}
                placeholder="your@email.com"
                className={errors.email ? 'border-red-500' : ''}
              />
              {errors.email && (
                <p className="text-red-600 text-sm mt-1">{errors.email.message}</p>
              )}
            </div>

            {/* Password Field */}
            <div>
              <label htmlFor="password" className="block text-sm font-medium text-navy-900 mb-1">
                Password
              </label>
              <Input
                id="password"
                type="password"
                {...register('password')}
                placeholder="Enter your password"
                className={errors.password ? 'border-red-500' : ''}
              />
              {errors.password && (
                <p className="text-red-600 text-sm mt-1">{errors.password.message}</p>
              )}
            </div>

            {/* API Error Display */}
            {apiError && (
              <div className="bg-red-50 border border-red-200 rounded-md p-3">
                <p className="text-red-700 text-sm">{apiError}</p>
              </div>
            )}

            {/* Submit Button */}
            <Button
              type="submit"
              variant="primary"
              size="lg"
              className="w-full"
              disabled={isSubmitting || loginMutation.isPending}
            >
              {isSubmitting || loginMutation.isPending ? 'Signing In...' : 'Sign In'}
            </Button>

            {/* Register Link */}
            <div className="text-center pt-4 border-t border-cream-200">
              <p className="text-sm text-navy-600">
                Don't have an account?{' '}
                <button
                  type="button"
                  onClick={() => router.push('/register')}
                  className="text-navy-900 hover:underline font-medium"
                >
                  Create Account
                </button>
              </p>
            </div>

            {/* Forgot Password */}
            <div className="text-center">
              <button
                type="button"
                className="text-sm text-navy-600 hover:text-navy-900 hover:underline"
                onClick={() => {
                  alert('Forgot password functionality coming soon!');
                }}
              >
                Forgot your password?
              </button>
            </div>
          </form>
        </CardContent>
      </Card>

      {/* Debug Information Panel */}
      {debugInfo && (
        <Card>
          <CardHeader>
            <h3 className="text-lg font-medium">Debug Information</h3>
          </CardHeader>
          <CardContent>
            <pre className="text-xs bg-gray-100 p-3 rounded overflow-auto max-h-64">
              {JSON.stringify(debugInfo, null, 2)}
            </pre>
          </CardContent>
        </Card>
      )}

      {/* Test Credentials Helper */}
      <Card>
        <CardContent>
          <p className="text-sm text-gray-600 text-center">
            Test with: mnraynor90@gmail.com / Dun3R0ad455@$$
          </p>
        </CardContent>
      </Card>
    </div>
  );
}
```

# ==== src/components/auth/register-form.tsx ====

```
// frontend/src/components/auth/register-form.tsx
'use client';

import { useState } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { useMutation } from '@tanstack/react-query';
import { useRouter } from 'next/navigation';
import { apiClient } from '@/lib/api-client';
import { useAuthStore } from '@/stores/auth-store';
import { Card, CardContent, CardHeader } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import type { DjangoUser, CustomerProfile } from '@/types';

const registerSchema = z.object({
  first_name: z.string().min(1, 'First name is required').max(150, 'First name too long'),
  last_name: z.string().min(1, 'Last name is required').max(150, 'Last name too long'),
  email: z.string().email('Please enter a valid email address'),
  phone: z.string().optional(),
  password: z.string()
    .min(8, 'Password must be at least 8 characters')
    .regex(/[A-Z]/, 'Password must contain at least one uppercase letter')
    .regex(/[a-z]/, 'Password must contain at least one lowercase letter')
    .regex(/[0-9]/, 'Password must contain at least one number'),
  password_confirm: z.string().min(1, 'Please confirm your password'),
}).refine((data) => data.password === data.password_confirm, {
  message: "Passwords don't match",
  path: ["password_confirm"],
});

type RegisterFormData = z.infer<typeof registerSchema>;

interface RegisterResponse {
  message: string;
  user: DjangoUser;
  customer_profile: CustomerProfile;
  csrf_token: string;
}

export function RegisterForm() {
  const router = useRouter();
  const { setAuth, setLoading } = useAuthStore();
  const [apiError, setApiError] = useState<string>('');

  const {
    register,
    handleSubmit,
    formState: { errors, isSubmitting },
  } = useForm<RegisterFormData>({
    resolver: zodResolver(registerSchema),
  });

  const registerMutation = useMutation({
    mutationFn: async (data: RegisterFormData): Promise<RegisterResponse> => {
      console.log('🔍 SENDING REGISTRATION REQUEST');
      console.log('📤 Request data:', { ...data, password: '[HIDDEN]', password_confirm: '[HIDDEN]' });
      
      const response = await apiClient.post('/api/customer/auth/register/', data);
      
      console.log('📥 Registration response:', {
        status: response.status,
        message: response.data.message
      });
      
      return response.data;
    },
    onSuccess: (data) => {
      console.log('🎉 REGISTRATION SUCCESS!');
      console.log('👤 New user:', data.user);
      
      try {
        setAuth(data.user, data.customer_profile);
        console.log('✅ Auth state updated successfully');
        router.push('/dashboard?welcome=true');
      } catch (err) {
        const errorMessage = err instanceof Error ? err.message : 'Unknown error in success handler';
        console.error('❌ Error in onSuccess handler:', err);
        setApiError(`Registration succeeded but login failed: ${errorMessage}`);
      }
    },
    onError: (error: any) => {
      console.log('❌ REGISTRATION ERROR');
      console.log('📊 Error details:', error.response?.data);
      
      let errorMessage = 'Registration failed. Please try again.';
      
      if (error.response?.data) {
        const errorData = error.response.data;
        
        // Handle field-specific errors
        if (typeof errorData === 'string') {
          errorMessage = errorData;
        } else if (errorData.email) {
          errorMessage = Array.isArray(errorData.email) 
            ? errorData.email[0] 
            : errorData.email;
        } else if (errorData.error) {
          errorMessage = errorData.error;
        } else if (errorData.detail) {
          errorMessage = errorData.detail;
        }
      }
      
      setApiError(errorMessage);
      setLoading(false);
    },
  });

  const onSubmit = async (data: RegisterFormData) => {
    console.log('🚀 REGISTRATION FORM SUBMITTED');
    setApiError('');
    setLoading(true);
    
    try {
      registerMutation.mutate(data);
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Unknown submit error';
      console.error('❌ Submit error:', err);
      setApiError(`Submit error: ${errorMessage}`);
      setLoading(false);
    }
  };

  return (
    <Card variant="luxury" className="w-full max-w-md mx-auto">
      <CardHeader>
        <h2 className="text-2xl font-serif font-bold text-navy-900 text-center">
          Create Your Account
        </h2>
        <p className="text-navy-700 text-center">
          Join ToteTaxi for faster booking and VIP benefits
        </p>
      </CardHeader>

      <CardContent>
        <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
          {/* First Name & Last Name Row */}
          <div className="grid grid-cols-2 gap-4">
            <div>
              <label htmlFor="first_name" className="block text-sm font-medium text-navy-900 mb-1">
                First Name *
              </label>
              <Input
                id="first_name"
                {...register('first_name')}
                placeholder="John"
                className={errors.first_name ? 'border-red-500' : ''}
              />
              {errors.first_name && (
                <p className="text-red-600 text-sm mt-1">{errors.first_name.message}</p>
              )}
            </div>
            
            <div>
              <label htmlFor="last_name" className="block text-sm font-medium text-navy-900 mb-1">
                Last Name *
              </label>
              <Input
                id="last_name"
                {...register('last_name')}
                placeholder="Smith"
                className={errors.last_name ? 'border-red-500' : ''}
              />
              {errors.last_name && (
                <p className="text-red-600 text-sm mt-1">{errors.last_name.message}</p>
              )}
            </div>
          </div>

          {/* Email Field */}
          <div>
            <label htmlFor="email" className="block text-sm font-medium text-navy-900 mb-1">
              Email Address *
            </label>
            <Input
              id="email"
              type="email"
              {...register('email')}
              placeholder="john@example.com"
              className={errors.email ? 'border-red-500' : ''}
            />
            {errors.email && (
              <p className="text-red-600 text-sm mt-1">{errors.email.message}</p>
            )}
          </div>

          {/* Phone Field */}
          <div>
            <label htmlFor="phone" className="block text-sm font-medium text-navy-900 mb-1">
              Phone Number
            </label>
            <Input
              id="phone"
              type="tel"
              {...register('phone')}
              placeholder="(555) 123-4567"
              className={errors.phone ? 'border-red-500' : ''}
            />
            {errors.phone && (
              <p className="text-red-600 text-sm mt-1">{errors.phone.message}</p>
            )}
            <p className="text-xs text-navy-600 mt-1">Optional - for booking updates</p>
          </div>

          {/* Password Field */}
          <div>
            <label htmlFor="password" className="block text-sm font-medium text-navy-900 mb-1">
              Password *
            </label>
            <Input
              id="password"
              type="password"
              {...register('password')}
              placeholder="Create a strong password"
              className={errors.password ? 'border-red-500' : ''}
            />
            {errors.password && (
              <p className="text-red-600 text-sm mt-1">{errors.password.message}</p>
            )}
          </div>

          {/* Confirm Password Field */}
          <div>
            <label htmlFor="password_confirm" className="block text-sm font-medium text-navy-900 mb-1">
              Confirm Password *
            </label>
            <Input
              id="password_confirm"
              type="password"
              {...register('password_confirm')}
              placeholder="Repeat your password"
              className={errors.password_confirm ? 'border-red-500' : ''}
            />
            {errors.password_confirm && (
              <p className="text-red-600 text-sm mt-1">{errors.password_confirm.message}</p>
            )}
          </div>

          {/* API Error Display */}
          {apiError && (
            <div className="bg-red-50 border border-red-200 rounded-md p-3">
              <p className="text-red-700 text-sm">{apiError}</p>
            </div>
          )}

          {/* Submit Button */}
          <Button
            type="submit"
            variant="primary"
            size="lg"
            className="w-full"
            disabled={isSubmitting || registerMutation.isPending}
          >
            {isSubmitting || registerMutation.isPending ? 'Creating Account...' : 'Create Account'}
          </Button>

          {/* Login Link */}
          <div className="text-center pt-4 border-t border-cream-200">
            <p className="text-sm text-navy-600">
              Already have an account?{' '}
              <button
                type="button"
                onClick={() => router.push('/login')}
                className="text-navy-900 hover:underline font-medium"
              >
                Sign In
              </button>
            </p>
          </div>

          {/* Terms Notice */}
          <div className="text-center">
            <p className="text-xs text-navy-600">
              By creating an account, you agree to our{' '}
              <a href="/terms" className="underline hover:text-navy-900">Terms of Service</a>
              {' '}and{' '}
              <a href="/privacy" className="underline hover:text-navy-900">Privacy Policy</a>
            </p>
          </div>
        </form>
      </CardContent>
    </Card>
  );
}
```

# ==== src/components/auth/user-menu.tsx ====

```
'use client';

import { useState, useRef } from 'react';
import { useRouter } from 'next/navigation';
import { useAuthStore } from '@/stores/auth-store';
import { useClickAway } from '@/hooks/use-click-away';
import { apiClient } from '@/lib/api-client';
import { 
  ChevronDownIcon, 
  UserIcon, 
  Cog6ToothIcon, 
  ArrowRightOnRectangleIcon,
  PlusIcon,
  BookOpenIcon
} from '@heroicons/react/24/outline';

interface UserMenuProps {
  variant?: 'header' | 'mobile';
}

export function UserMenu({ variant = 'header' }: UserMenuProps) {
  const { user, customerProfile, clearAuth } = useAuthStore();
  const [isOpen, setIsOpen] = useState(false);
  const router = useRouter();
  const dropdownRef = useRef<HTMLDivElement>(null);

  // Close dropdown when clicking outside
  useClickAway(dropdownRef, () => setIsOpen(false));

  const handleLogout = async () => {
    try {
      await apiClient.post('/api/customer/auth/logout/');
      clearAuth();
      router.push('/');
      setIsOpen(false);
    } catch (error) {
      console.error('Logout error:', error);
      clearAuth();
      router.push('/');
    }
  };

  const menuItems = [
    {
      label: 'Book a Move',
      icon: PlusIcon,
      onClick: () => {
        router.push('/book');
        setIsOpen(false);
      },
      primary: true
    },
    {
      label: 'Dashboard',
      icon: UserIcon,
      onClick: () => {
        router.push('/dashboard');
        setIsOpen(false);
      }
    },
    {
      label: 'Booking History',
      icon: BookOpenIcon,
      onClick: () => {
        router.push('/dashboard/bookings');
        setIsOpen(false);
      }
    },
    {
      label: 'Account Settings',
      icon: Cog6ToothIcon,
      onClick: () => {
        alert('Account settings coming soon!');
        setIsOpen(false);
      }
    },
    {
      label: 'Sign Out',
      icon: ArrowRightOnRectangleIcon,
      onClick: handleLogout,
      danger: true
    }
  ];

  if (!user) return null;

  if (variant === 'mobile') {
    return (
      <div className="space-y-2 pt-4 border-t border-gray-200">
        {/* User Info */}
        <div className="px-4 py-3 bg-gray-50 rounded-lg mx-4">
          <p className="font-medium text-navy-900">{user.first_name} {user.last_name}</p>
          <p className="text-sm text-navy-600">{user.email}</p>
          <div className="flex items-center gap-2 mt-2">
            {customerProfile?.is_vip && (
              <span className="inline-block px-2 py-1 text-xs bg-yellow-100 text-yellow-800 rounded-full">
                VIP
              </span>
            )}
            {customerProfile && customerProfile.total_bookings > 0 && (
              <span className="inline-block px-2 py-1 text-xs bg-blue-100 text-blue-800 rounded-full">
                {customerProfile.total_bookings} bookings
              </span>
            )}
          </div>
        </div>

        {/* Menu Items */}
        {menuItems.map((item) => {
          const Icon = item.icon;
          return (
            <button
              key={item.label}
              onClick={item.onClick}
              className={`w-full flex items-center px-4 py-3 text-left hover:bg-gray-50 transition-colors ${
                item.primary 
                  ? 'text-blue-600 hover:text-blue-700 font-medium' 
                  : item.danger 
                  ? 'text-red-600 hover:text-red-700' 
                  : 'text-navy-700 hover:text-navy-900'
              }`}
            >
              <Icon className="h-5 w-5 mr-3" />
              {item.label}
            </button>
          );
        })}
      </div>
    );
  }

  return (
    <div className="relative" ref={dropdownRef}>
      <button
        onClick={() => setIsOpen(!isOpen)}
        className="flex items-center space-x-2 text-navy-700 hover:text-navy-900 transition-colors py-2 px-3 rounded-lg hover:bg-gray-50"
      >
        <div className="text-right">
          <div className="text-sm font-medium">{user.first_name}</div>
          {customerProfile?.is_vip && (
            <div className="text-xs text-yellow-600">VIP</div>
          )}
        </div>
        <ChevronDownIcon className={`h-4 w-4 transition-transform ${isOpen ? 'rotate-180' : ''}`} />
      </button>

      {isOpen && (
        <div className="absolute right-0 mt-2 w-56 bg-white rounded-lg shadow-lg ring-1 ring-black ring-opacity-5 z-50 border border-gray-200">
          <div className="py-1">
            {/* User Header */}
            <div className="px-4 py-3 border-b border-gray-100 bg-gray-50">
              <p className="font-medium text-navy-900">{user.first_name} {user.last_name}</p>
              <p className="text-sm text-navy-600">{user.email}</p>
              {customerProfile && (
                <div className="flex items-center gap-2 mt-2">
                  {customerProfile.is_vip && (
                    <span className="inline-block px-2 py-1 text-xs bg-yellow-100 text-yellow-800 rounded-full">
                      VIP
                    </span>
                  )}
                  {customerProfile.total_spent_dollars > 0 && (
                    <span className="text-xs text-navy-600">
                      ${customerProfile.total_spent_dollars} spent
                    </span>
                  )}
                </div>
              )}
            </div>

            {/* Menu Items */}
            {menuItems.map((item, index) => {
              const Icon = item.icon;
              return (
                <button
                  key={item.label}
                  onClick={item.onClick}
                  className={`w-full flex items-center px-4 py-2 text-left hover:bg-gray-50 transition-colors ${
                    item.primary 
                      ? 'text-blue-600 hover:text-blue-700 font-medium' 
                      : item.danger 
                      ? 'text-red-600 hover:text-red-700' 
                      : 'text-navy-700 hover:text-navy-900'
                  } ${index === menuItems.length - 1 ? 'border-t border-gray-100 mt-1' : ''}`}
                >
                  <Icon className="h-5 w-5 mr-3" />
                  {item.label}
                </button>
              );
            })}
          </div>
        </div>
      )}
    </div>
  );
}
```

# ==== src/components/booking/address-step.tsx ====

```
// frontend/src/components/booking/address-step.tsx
'use client';

import { useBookingWizard, type BookingAddress } from '@/stores/booking-store';
import { Card, CardContent, CardHeader } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';

const STATES = [
  { value: 'NY', label: 'New York' },
  { value: 'CT', label: 'Connecticut' },
  { value: 'NJ', label: 'New Jersey' },
];

interface AddressFormProps {
  title: string;
  address: BookingAddress | undefined;
  onAddressChange: (address: BookingAddress) => void;
  errors: Record<string, string>;
}

function AddressForm({ title, address, onAddressChange, errors }: AddressFormProps) {
  const handleFieldChange = (field: keyof BookingAddress, value: string) => {
    onAddressChange({
      ...address,
      [field]: value
    } as BookingAddress);
  };

  return (
    <Card variant="elevated">
      <CardHeader>
        <h3 className="text-lg font-medium text-navy-900">{title}</h3>
      </CardHeader>
      
      <CardContent>
        <div className="space-y-4">
          <Input
            label="Street Address"
            value={address?.address_line_1 || ''}
            onChange={(e) => handleFieldChange('address_line_1', e.target.value)}
            error={errors.address_line_1}
            placeholder="123 Main Street"
            required
          />
          
          <Input
            label="Apartment, Suite, etc. (Optional)"
            value={address?.address_line_2 || ''}
            onChange={(e) => handleFieldChange('address_line_2', e.target.value)}
            placeholder="Apt 4B, Suite 200"
          />
          
          <div className="grid grid-cols-2 gap-4">
            <Input
              label="City"
              value={address?.city || ''}
              onChange={(e) => handleFieldChange('city', e.target.value)}
              error={errors.city}
              placeholder="New York"
              required
            />
            
            <div>
              <label className="block text-sm font-medium text-navy-900 mb-1">
                State <span className="text-red-500">*</span>
              </label>
              <select
                value={address?.state || ''}
                onChange={(e) => handleFieldChange('state', e.target.value as 'NY' | 'CT' | 'NJ')}
                className="w-full px-4 py-3 text-base border border-gray-300 rounded-md shadow-sm focus:border-navy-500 focus:ring-navy-500 text-gray-900 bg-white"
                required
              >
                <option value="" className="text-gray-400">Select State</option>
                {STATES.map(state => (
                  <option key={state.value} value={state.value} className="text-gray-900">
                    {state.label}
                  </option>
                ))}
              </select>
            </div>
          </div>
          
          <Input
            label="ZIP Code"
            value={address?.zip_code || ''}
            onChange={(e) => handleFieldChange('zip_code', e.target.value)}
            error={errors.zip_code}
            placeholder="10001"
            required
          />
        </div>
      </CardContent>
    </Card>
  );
}

export function AddressStep() {
  const { bookingData, updateBookingData, nextStep, errors, setError, clearError } = useBookingWizard();

  const handlePickupChange = (address: BookingAddress) => {
    updateBookingData({ pickup_address: address });
    // Clear errors when user starts typing
    if (address.address_line_1) clearError('pickup_address');
    if (address.city) clearError('pickup_city');
    if (address.zip_code) clearError('pickup_zip');
  };

  const handleDeliveryChange = (address: BookingAddress) => {
    updateBookingData({ delivery_address: address });
    // Clear errors when user starts typing
    if (address.address_line_1) clearError('delivery_address');
    if (address.city) clearError('delivery_city');
    if (address.zip_code) clearError('delivery_zip');
  };

  const handleContinue = () => {
    let hasErrors = false;

    // Validate pickup address
    if (!bookingData.pickup_address?.address_line_1) {
      setError('pickup_address', 'Pickup address is required');
      hasErrors = true;
    }
    if (!bookingData.pickup_address?.city) {
      setError('pickup_city', 'City is required');
      hasErrors = true;
    }
    if (!bookingData.pickup_address?.state) {
      setError('pickup_state', 'State is required');
      hasErrors = true;
    }
    if (!bookingData.pickup_address?.zip_code) {
      setError('pickup_zip', 'ZIP code is required');
      hasErrors = true;
    }

    // Validate delivery address
    if (!bookingData.delivery_address?.address_line_1) {
      setError('delivery_address', 'Delivery address is required');
      hasErrors = true;
    }
    if (!bookingData.delivery_address?.city) {
      setError('delivery_city', 'City is required');
      hasErrors = true;
    }
    if (!bookingData.delivery_address?.state) {
      setError('delivery_state', 'State is required');
      hasErrors = true;
    }
    if (!bookingData.delivery_address?.zip_code) {
      setError('delivery_zip', 'ZIP code is required');
      hasErrors = true;
    }

    if (!hasErrors) {
      nextStep();
    }
  };

  const canContinue = 
    bookingData.pickup_address?.address_line_1 &&
    bookingData.pickup_address?.city &&
    bookingData.pickup_address?.state &&
    bookingData.pickup_address?.zip_code &&
    bookingData.delivery_address?.address_line_1 &&
    bookingData.delivery_address?.city &&
    bookingData.delivery_address?.state &&
    bookingData.delivery_address?.zip_code;

  return (
    <div className="space-y-6">
      {/* Instructions */}
      <div className="text-center py-4">
        <p className="text-navy-700">
          Where should we pick up and deliver your items?
        </p>
        <p className="text-sm text-navy-600 mt-1">
          We service Manhattan, Brooklyn, the Hamptons, and surrounding areas.
        </p>
      </div>

      {/* Pickup Address */}
      <AddressForm
        title="Pickup Address"
        address={bookingData.pickup_address}
        onAddressChange={handlePickupChange}
        errors={{
          address_line_1: errors.pickup_address || '',
          city: errors.pickup_city || '',
          state: errors.pickup_state || '',
          zip_code: errors.pickup_zip || ''
        }}
      />

      {/* Delivery Address */}
      <AddressForm
        title="Delivery Address"
        address={bookingData.delivery_address}
        onAddressChange={handleDeliveryChange}
        errors={{
          address_line_1: errors.delivery_address || '',
          city: errors.delivery_city || '',
          state: errors.delivery_state || '',
          zip_code: errors.delivery_zip || ''
        }}
      />

      {/* Special Instructions */}
      <Card variant="default">
        <CardContent>
          <label className="block text-sm font-medium text-navy-900 mb-2">
            Special Instructions (Optional)
          </label>
          <textarea
            value={bookingData.special_instructions || ''}
            onChange={(e) => updateBookingData({ special_instructions: e.target.value })}
            placeholder="Any special delivery instructions, building access codes, or notes for our team..."
            rows={3}
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-navy-500 focus:border-navy-500 text-gray-900 placeholder:text-gray-400 bg-white"
          />
          <p className="text-sm text-navy-600 mt-1">
            Include building access codes, doorman instructions, or any special handling requests.
          </p>
        </CardContent>
      </Card>

      {/* Continue Button */}
      <div className="flex justify-end pt-4">
        <Button
          onClick={handleContinue}
          disabled={!canContinue}
          size="lg"
        >
          Continue to Your Info →
        </Button>
      </div>
    </div>
  );
}
```

# ==== src/components/booking/booking-wizard.tsx ====

```
'use client';
// frontend/src/components/booking/booking-wizard.tsx
import { useEffect } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { useBookingWizard } from '@/stores/booking-store';
import { useAuthStore } from '@/stores/auth-store';
import { Card, CardContent, CardHeader } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { ServiceSelectionStep } from './service-selection-step';
import { DateTimeStep } from './date-time-step';
import { AddressStep } from './address-step';
import { CustomerInfoStep } from './customer-info-step';
import { ReviewPaymentStep } from './review-payment-step';

const STEPS = [
  { number: 1, title: 'Select Service', component: ServiceSelectionStep },
  { number: 2, title: 'Date & Time', component: DateTimeStep },
  { number: 3, title: 'Addresses', component: AddressStep },
  { number: 4, title: 'Your Info', component: CustomerInfoStep },
  { number: 5, title: 'Review & Pay', component: ReviewPaymentStep },
];

export function BookingWizard() {
  const {
    currentStep,
    nextStep,
    previousStep,
    canProceedToStep,
    resetWizard
  } = useBookingWizard();
  
  const { isAuthenticated } = useAuthStore();
  const router = useRouter();
  const searchParams = useSearchParams();

  // RESET WIZARD ON FRESH PAGE LOAD OR EXPLICIT RESET
  useEffect(() => {
    const shouldReset = searchParams.get('reset') === 'true';
    
    if (shouldReset) {
      resetWizard();
      // Clean up URL without triggering reload
      router.replace('/book', { scroll: false });
    }
  }, [searchParams, resetWizard, router]);

  // PREVENT AUTH-PROTECTED STEPS FOR UNAUTHENTICATED USERS
  useEffect(() => {
    // If user is not authenticated and somehow on step 4+, reset to step 1
    if (!isAuthenticated && currentStep >= 4) {
      const hasCustomerInfo = searchParams.get('guest') === 'true';
      if (!hasCustomerInfo) {
        resetWizard();
      }
    }
  }, [isAuthenticated, currentStep, resetWizard, searchParams]);

  const CurrentStepComponent = STEPS.find(step => step.number === currentStep)?.component;

  const handleStartOver = () => {
    resetWizard();
    router.replace('/book?reset=true', { scroll: false });
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-cream-50 to-cream-100 py-8">
      <div className="container mx-auto px-4 max-w-4xl">
        {/* Header */}
        <div className="text-center mb-8">
          <h1 className="text-3xl font-serif font-bold text-navy-900 mb-2">
            Book Your Luxury Move
          </h1>
          <p className="text-navy-700">
            From Manhattan to the Hamptons with premium care
          </p>
        </div>

        {/* Progress Steps */}
        <div className="mb-8">
          <div className="flex items-center justify-between">
            {STEPS.map((step, index) => (
              <div key={step.number} className="flex items-center">
                {/* Step Circle */}
                <div className={`
                  w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium
                  ${currentStep === step.number 
                    ? 'bg-navy-900 text-white' 
                    : currentStep > step.number
                    ? 'bg-green-500 text-white'
                    : canProceedToStep(step.number)
                    ? 'bg-navy-200 text-navy-900 cursor-pointer hover:bg-navy-300'
                    : 'bg-gray-200 text-gray-500'
                  }
                `}>
                  {currentStep > step.number ? '✓' : step.number}
                </div>
                
                {/* Step Title */}
                <span className={`
                  ml-2 text-sm font-medium
                  ${currentStep === step.number ? 'text-navy-900' : 'text-navy-600'}
                `}>
                  {step.title}
                </span>
                
                {/* Connector Line */}
                {index < STEPS.length - 1 && (
                  <div className={`
                    h-0.5 w-12 mx-4
                    ${currentStep > step.number ? 'bg-green-500' : 'bg-gray-200'}
                  `} />
                )}
              </div>
            ))}
          </div>
        </div>

        {/* Main Content */}
        <Card variant="elevated" className="mb-8">
          <CardHeader>
            <h2 className="text-xl font-serif font-bold text-navy-900">
              Step {currentStep}: {STEPS.find(s => s.number === currentStep)?.title}
            </h2>
          </CardHeader>
          <CardContent>
            {CurrentStepComponent && <CurrentStepComponent />}
          </CardContent>
        </Card>

        {/* Navigation */}
        <div className="flex justify-between items-center">
          <div>
            {currentStep > 1 && (
              <Button 
                variant="outline" 
                onClick={previousStep}
                className="mr-4"
              >
                ← Previous
              </Button>
            )}
            <Button 
              variant="ghost" 
              onClick={handleStartOver}
              className="text-navy-600"
            >
              Start Over
            </Button>
          </div>
          
          <div>
            {currentStep < 5 && canProceedToStep(currentStep + 1) && (
              <Button 
                variant="primary" 
                onClick={nextStep}
              >
                Continue →
              </Button>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}
```

# ==== src/components/booking/customer-info-step.tsx ====

```
// frontend/src/components/booking/customer-info-step.tsx
'use client';

import { useBookingWizard } from '@/stores/booking-store';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';

export function CustomerInfoStep() {
  const { bookingData, updateBookingData, nextStep, errors, setError, clearError } = useBookingWizard();

  const handleFieldChange = (field: string, value: string) => {
    updateBookingData({
      customer_info: {
        first_name: bookingData.customer_info?.first_name || '',
        last_name: bookingData.customer_info?.last_name || '',
        email: bookingData.customer_info?.email || '',
        phone: bookingData.customer_info?.phone || '',
        ...bookingData.customer_info,
        [field]: value
      }
    });
    clearError(field);
  };

  const validateAndContinue = () => {
    let hasErrors = false;

    // Validate required fields
    if (!bookingData.customer_info?.first_name) {
      setError('first_name', 'First name is required');
      hasErrors = true;
    }
    if (!bookingData.customer_info?.last_name) {
      setError('last_name', 'Last name is required');
      hasErrors = true;
    }
    if (!bookingData.customer_info?.email) {
      setError('email', 'Email is required');
      hasErrors = true;
    } else if (!/\S+@\S+\.\S+/.test(bookingData.customer_info.email)) {
      setError('email', 'Please enter a valid email address');
      hasErrors = true;
    }
    if (!bookingData.customer_info?.phone) {
      setError('phone', 'Phone number is required');
      hasErrors = true;
    } else if (!/^[\+]?[1]?[-\s\.]?[\(]?[0-9]{3}[\)]?[-\s\.]?[0-9]{3}[-\s\.]?[0-9]{4}$/.test(bookingData.customer_info.phone)) {
      setError('phone', 'Please enter a valid phone number');
      hasErrors = true;
    }

    if (!hasErrors) {
      nextStep();
    }
  };

  const canContinue = 
    bookingData.customer_info?.first_name &&
    bookingData.customer_info?.last_name &&
    bookingData.customer_info?.email &&
    bookingData.customer_info?.phone;

  return (
    <div className="space-y-6">
      {/* Information Card */}
      <div className="text-center py-4">
        <h3 className="text-lg font-medium text-navy-900 mb-2">Contact Information</h3>
        <p className="text-navy-700">
          We'll use this information to coordinate your pickup and delivery.
        </p>
      </div>

      {/* Customer Info Form */}
      <Card variant="elevated">
        <CardContent>
          <div className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <Input
                label="First Name"
                value={bookingData.customer_info?.first_name || ''}
                onChange={(e) => handleFieldChange('first_name', e.target.value)}
                error={errors.first_name}
                placeholder="John"
                required
              />
              
              <Input
                label="Last Name"
                value={bookingData.customer_info?.last_name || ''}
                onChange={(e) => handleFieldChange('last_name', e.target.value)}
                error={errors.last_name}
                placeholder="Smith"
                required
              />
            </div>
            
            <Input
              label="Email Address"
              type="email"
              value={bookingData.customer_info?.email || ''}
              onChange={(e) => handleFieldChange('email', e.target.value)}
              error={errors.email}
              placeholder="john.smith@email.com"
              helper="We'll send confirmation and tracking updates to this email"
              required
            />
            
            <Input
              label="Phone Number"
              type="tel"
              value={bookingData.customer_info?.phone || ''}
              onChange={(e) => handleFieldChange('phone', e.target.value)}
              error={errors.phone}
              placeholder="(555) 123-4567"
              helper="For pickup and delivery coordination"
              required
            />
          </div>
        </CardContent>
      </Card>

      {/* Privacy Notice */}
      <Card variant="default" className="border-gold-200 bg-gold-50">
        <CardContent>
          <div className="flex items-start">
            <div className="text-gold-600 mr-3 mt-1">🔒</div>
            <div>
              <h4 className="font-medium text-navy-900 mb-1">Privacy & Security</h4>
              <p className="text-sm text-navy-700">
                Your information is encrypted and secure. We'll only use it to provide your ToteTaxi service 
                and send important updates about your booking. We never sell or share your personal data.
              </p>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* VIP Program Signup */}
      <Card variant="luxury">
        <CardContent>
          <div className="text-center">
            <h4 className="font-serif text-lg font-bold text-navy-900 mb-2">
              Join ToteTaxi VIP
            </h4>
            <p className="text-navy-700 text-sm mb-4">
              Get priority scheduling, exclusive pricing, and seasonal storage benefits.
            </p>
            <label className="flex items-center justify-center">
              <input
                type="checkbox"
                className="mr-2"
                // This could be stored in booking data if you want to track VIP signups
              />
              <span className="text-sm text-navy-900">
                Yes, I want to join ToteTaxi VIP (free to join)
              </span>
            </label>
          </div>
        </CardContent>
      </Card>

      {/* Account Creation Notice */}
      <div className="text-center text-sm text-navy-600">
        <p>
          Already have an account? 
          <button className="text-navy-900 hover:underline ml-1">
            Sign in for faster checkout
          </button>
        </p>
      </div>

      {/* Continue Button */}
      <div className="flex justify-end">
        <Button 
          variant="primary" 
          onClick={validateAndContinue}
          disabled={!canContinue}
        >
          Continue to Review & Payment →
        </Button>
      </div>
    </div>
  );
}
```

# ==== src/components/booking/date-time-step.tsx ====

```
// frontend/src/components/booking/date-time-step.tsx
'use client';

import { useState, useEffect } from 'react';
import { useQuery, useMutation } from '@tanstack/react-query';
import { apiClient } from '@/lib/api-client';
import { useBookingWizard } from '@/stores/booking-store';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';

interface AvailabilityDay {
  date: string;
  available: boolean;
  is_weekend: boolean;
  specialty_items_allowed: boolean;
  capacity_used: number;
  max_capacity: number;
  surcharges: Array<{
    name: string;
    type: string;
    description: string;
  }>;
}

interface PricingPreview {
  service_type: string;
  pricing: {
    base_price_dollars: number;
    surcharge_dollars: number;
    coi_fee_dollars: number;
    organizing_total_dollars: number;
    total_price_dollars: number;
  };
  details: any;
  pickup_date: string;
}

type PickupTime = 'morning' | 'afternoon' | 'evening';

export function DateTimeStep() {
  const { bookingData, updateBookingData, nextStep } = useBookingWizard();
  const [selectedDate, setSelectedDate] = useState<string>(bookingData.pickup_date || '');
  const [selectedTime, setSelectedTime] = useState<PickupTime>(bookingData.pickup_time || 'morning');

  // Get calendar availability
  const { data: availability } = useQuery({
    queryKey: ['availability', 'calendar'],
    queryFn: async () => {
      const response = await apiClient.get('/api/public/availability/');
      return response.data.availability as AvailabilityDay[];
    }
  });

  // Get pricing preview
  const pricingMutation = useMutation({
    mutationFn: async (): Promise<PricingPreview> => {
      const response = await apiClient.post('/api/public/pricing-preview/', {
        service_type: bookingData.service_type,
        mini_move_package_id: bookingData.mini_move_package_id,
        include_packing: bookingData.include_packing,
        include_unpacking: bookingData.include_unpacking,
        standard_delivery_item_count: bookingData.standard_delivery_item_count,
        is_same_day_delivery: bookingData.is_same_day_delivery,
        specialty_item_ids: bookingData.specialty_item_ids,
        pickup_date: selectedDate,
        coi_required: bookingData.coi_required || false
      });
      return response.data;
    }
  });

  // Update pricing when date/service changes
  useEffect(() => {
    if (selectedDate && bookingData.service_type) {
      pricingMutation.mutate();
    }
  }, [selectedDate, bookingData.service_type, bookingData.mini_move_package_id, bookingData.include_packing, bookingData.include_unpacking, bookingData.standard_delivery_item_count, bookingData.is_same_day_delivery]);

  const handleDateSelect = (date: string) => {
    setSelectedDate(date);
    updateBookingData({ pickup_date: date });
  };

  const handleTimeSelect = (time: PickupTime) => {
    setSelectedTime(time);
    updateBookingData({ pickup_time: time });
  };

  const handleContinue = () => {
    // Store pricing data
    if (pricingMutation.data?.pricing) {
      updateBookingData({ pricing_data: pricingMutation.data.pricing });
    }
    nextStep();
  };

  // Simple calendar view - next 30 days
  const getNext30Days = () => {
    const days = [];
    const today = new Date();
    for (let i = 0; i < 30; i++) {
      const date = new Date(today);
      date.setDate(today.getDate() + i);
      days.push(date);
    }
    return days;
  };

  const formatDate = (date: Date) => {
    return date.toISOString().split('T')[0];
  };

  const getDayInfo = (date: Date) => {
    const dateStr = formatDate(date);
    return availability?.find(day => day.date === dateStr);
  };

  const canContinue = selectedDate && selectedTime;

  return (
    <div className="space-y-6">
      {/* Calendar */}
      <div>
        <h3 className="text-lg font-medium text-navy-900 mb-4">Select Date</h3>
        <div className="grid grid-cols-7 gap-2">
          {getNext30Days().map((date) => {
            const dateStr = formatDate(date);
            const dayInfo = getDayInfo(date);
            const isSelected = selectedDate === dateStr;
            const isAvailable = dayInfo?.available !== false;
            const hasSurcharge = dayInfo?.surcharges && dayInfo.surcharges.length > 0;

            return (
              <button
                key={dateStr}
                onClick={() => isAvailable && handleDateSelect(dateStr)}
                disabled={!isAvailable}
                className={`
                  p-2 text-sm rounded-md border transition-all min-h-[60px] flex flex-col items-center justify-center
                  ${isSelected 
                    ? 'bg-navy-900 text-white border-navy-900' 
                    : isAvailable
                    ? 'bg-white text-navy-900 border-gray-200 hover:border-navy-300 hover:bg-navy-50'
                    : 'bg-gray-100 text-gray-400 border-gray-200 cursor-not-allowed'
                  }
                `}
              >
                <div className="font-medium">{date.getDate()}</div>
                <div className="text-xs opacity-75">
                  {date.toLocaleDateString('en-US', { weekday: 'short' })}
                </div>
                {hasSurcharge && (
                  <div className="text-xs text-orange-600 mt-1">•</div>
                )}
              </button>
            );
          })}
        </div>
        
        {/* Legend */}
        <div className="flex items-center justify-center space-x-4 mt-3 text-sm">
          <div className="flex items-center">
            <div className="w-3 h-3 bg-white border border-gray-200 rounded mr-2"></div>
            <span className="text-navy-600">Available</span>
          </div>
          <div className="flex items-center">
            <div className="w-3 h-3 bg-gray-100 rounded mr-2"></div>
            <span className="text-navy-600">Unavailable</span>
          </div>
          <div className="flex items-center">
            <div className="w-3 h-3 bg-orange-100 rounded mr-2"></div>
            <span className="text-navy-600">Surcharge applies</span>
          </div>
        </div>
      </div>

      {/* Selected Date Info */}
      {selectedDate && (
        <Card variant="default">
          <CardContent>
            <div className="text-center">
              <h4 className="font-medium text-navy-900 mb-2">
                {new Date(selectedDate + 'T00:00:00').toLocaleDateString('en-US', { 
                  weekday: 'long', 
                  year: 'numeric', 
                  month: 'long', 
                  day: 'numeric' 
                })}
              </h4>
              <p className="text-sm text-navy-600">
                {getDayInfo(new Date(selectedDate + 'T00:00:00'))?.capacity_used || 0}/
                {getDayInfo(new Date(selectedDate + 'T00:00:00'))?.max_capacity || 10} booked
              </p>
              
              {/* Surcharge notices */}
              {getDayInfo(new Date(selectedDate + 'T00:00:00'))?.surcharges?.map((surcharge, index) => (
                <div key={index} className="mt-2 text-sm text-orange-600">
                  <strong>Additional charges apply:</strong>
                  <br />• {surcharge.description}
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}

      {/* Time Selection */}
      {selectedDate && (
        <div>
          <h3 className="text-lg font-medium text-navy-900 mb-4">Select Pickup Time</h3>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <button
              onClick={() => handleTimeSelect('morning')}
              className={`p-4 rounded-lg border-2 text-center transition-all ${
                selectedTime === 'morning'
                  ? 'border-navy-500 bg-navy-50'
                  : 'border-gray-200 hover:border-gray-300'
              }`}
            >
              <div className="font-medium text-navy-900">8 AM - 11 AM</div>
              <div className="text-sm text-navy-600">Best availability</div>
            </button>

            <button
              onClick={() => handleTimeSelect('afternoon')}
              className={`p-4 rounded-lg border-2 text-center transition-all ${
                selectedTime === 'afternoon'
                  ? 'border-navy-500 bg-navy-50'
                  : 'border-gray-200 hover:border-gray-300'
              }`}
            >
              <div className="font-medium text-navy-900">12 PM - 3 PM</div>
              <div className="text-sm text-navy-600">Popular choice</div>
            </button>

            <button
              onClick={() => handleTimeSelect('evening')}
              className={`p-4 rounded-lg border-2 text-center transition-all ${
                selectedTime === 'evening'
                  ? 'border-navy-500 bg-navy-50'
                  : 'border-gray-200 hover:border-gray-300'
              }`}
            >
              <div className="font-medium text-navy-900">4 PM - 7 PM</div>
              <div className="text-sm text-navy-600">Limited availability</div>
            </button>
          </div>
        </div>
      )}

      {/* FIXED: Pricing Summary with dark text */}
      {pricingMutation.data?.pricing && (
        <Card variant="luxury">
          <CardContent>
            <h3 className="text-lg font-medium text-navy-900 mb-4">Pricing Summary</h3>
            <div className="space-y-3">
              <div className="flex justify-between items-center">
                <span className="text-navy-900 font-medium">Base Price:</span>
                <span className="text-navy-900 font-semibold">${pricingMutation.data.pricing.base_price_dollars}</span>
              </div>

              {pricingMutation.data.pricing.surcharge_dollars > 0 && (
                <div className="flex justify-between items-center">
                  <span className="text-navy-900 font-medium">Date Surcharges:</span>
                  <span className="text-navy-900 font-semibold">+${pricingMutation.data.pricing.surcharge_dollars}</span>
                </div>
              )}

              {pricingMutation.data.pricing.coi_fee_dollars > 0 && (
                <div className="flex justify-between items-center">
                  <span className="text-navy-900 font-medium">COI Fee:</span>
                  <span className="text-navy-900 font-semibold">+${pricingMutation.data.pricing.coi_fee_dollars}</span>
                </div>
              )}

              {pricingMutation.data.pricing.organizing_total_dollars > 0 && (
                <div className="flex justify-between items-center">
                  <span className="text-navy-900 font-medium">Organizing Services:</span>
                  <span className="text-navy-900 font-semibold">+${pricingMutation.data.pricing.organizing_total_dollars}</span>
                </div>
              )}

              <div className="border-t border-gray-200 pt-3">
                <div className="flex justify-between items-center">
                  <span className="text-lg font-bold text-navy-900">Total:</span>
                  <span className="text-xl font-bold text-navy-900">${pricingMutation.data.pricing.total_price_dollars}</span>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      )}

      {/* COI Option */}
      {selectedDate && (
        <Card variant="default">
          <CardContent>
            <label className="flex items-center">
              <input
                type="checkbox"
                checked={bookingData.coi_required || false}
                onChange={(e) => updateBookingData({ coi_required: e.target.checked })}
                className="mr-3"
              />
              <div>
                <span className="font-medium text-navy-900">Certificate of Insurance (COI) Required</span>
                <p className="text-sm text-navy-600">
                  Required by some buildings. We'll handle the paperwork for you.
                </p>
              </div>
            </label>
          </CardContent>
        </Card>
      )}

      {/* Continue Button */}
      <div className="flex justify-end pt-4">
        <Button
          onClick={handleContinue}
          disabled={!canContinue || pricingMutation.isPending}
          size="lg"
        >
          {pricingMutation.isPending ? 'Calculating...' : 'Continue to Addresses →'}
        </Button>
      </div>
    </div>
  );
}
```

# ==== src/components/booking/index.ts ====

```
// frontend/src/components/booking/index.ts
export { BookingWizard } from './booking-wizard';
export { ServiceSelectionStep } from './service-selection-step';
export { DateTimeStep } from './date-time-step';
export { AddressStep } from './address-step';
export { CustomerInfoStep } from './customer-info-step';
export { ReviewPaymentStep } from './review-payment-step';
```

# ==== src/components/booking/review-payment-step.tsx ====

```
'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import { useMutation, useQueryClient } from '@tanstack/react-query';
import { apiClient } from '@/lib/api-client';
import { useBookingWizard } from '@/stores/booking-store';
import { useAuthStore } from '@/stores/auth-store';
import { Card, CardContent, CardHeader } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { AxiosError } from 'axios';

interface BookingResponse {
  message: string;
  booking: {
    id: string;
    booking_number: string;
    total_price_dollars: number;
  };
}

export function ReviewPaymentStep() {
  const { bookingData, resetWizard, setLoading, isLoading, setBookingComplete } = useBookingWizard();
  const { isAuthenticated } = useAuthStore();
  const queryClient = useQueryClient();
  const router = useRouter();
  const [bookingComplete, setBookingCompleteLocal] = useState(false);
  const [bookingNumber, setBookingNumber] = useState<string>('');

  // Create booking mutation
  const createBookingMutation = useMutation({
    mutationFn: async (): Promise<BookingResponse> => {
      // Use correct endpoint based on authentication status
      const endpoint = isAuthenticated 
        ? '/api/customer/bookings/create/'     // Updates customer stats
        : '/api/public/guest-booking/';        // Guest booking

      console.log(`Creating ${isAuthenticated ? 'authenticated' : 'guest'} booking at:`, endpoint);

      let bookingRequest;

      if (isAuthenticated) {
        // Generate unique nicknames with timestamp
        const timestamp = new Date().toISOString().slice(11, 16); // HH:MM format
        const dateStr = new Date().toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
        
        // Authenticated booking format - different structure
        bookingRequest = {
          // Service selection
          service_type: bookingData.service_type,
          mini_move_package_id: bookingData.mini_move_package_id,
          include_packing: bookingData.include_packing,
          include_unpacking: bookingData.include_unpacking,
          standard_delivery_item_count: bookingData.standard_delivery_item_count,
          is_same_day_delivery: bookingData.is_same_day_delivery,
          specialty_item_ids: bookingData.specialty_item_ids,
          
          // Date and time
          pickup_date: bookingData.pickup_date,
          pickup_time: bookingData.pickup_time,
          
          // Addresses - use new_pickup_address format for authenticated users
          new_pickup_address: bookingData.pickup_address,
          new_delivery_address: bookingData.delivery_address,
          save_pickup_address: true,  // Save addresses for future use
          save_delivery_address: true,
          pickup_address_nickname: `Pickup ${dateStr} ${timestamp}`,  // Unique nickname
          delivery_address_nickname: `Delivery ${dateStr} ${timestamp}`, // Unique nickname
          
          // Additional info
          special_instructions: bookingData.special_instructions,
          coi_required: bookingData.coi_required,
          create_payment_intent: false, // Disable for demo
        };
      } else {
        // Guest booking format - original structure
        bookingRequest = {
          // Customer info
          first_name: bookingData.customer_info?.first_name,
          last_name: bookingData.customer_info?.last_name,
          email: bookingData.customer_info?.email,
          phone: bookingData.customer_info?.phone,
          
          // Service selection
          service_type: bookingData.service_type,
          mini_move_package_id: bookingData.mini_move_package_id,
          include_packing: bookingData.include_packing,
          include_unpacking: bookingData.include_unpacking,
          standard_delivery_item_count: bookingData.standard_delivery_item_count,
          is_same_day_delivery: bookingData.is_same_day_delivery,
          specialty_item_ids: bookingData.specialty_item_ids,
          
          // Date and time
          pickup_date: bookingData.pickup_date,
          pickup_time: bookingData.pickup_time,
          
          // Addresses
          pickup_address: bookingData.pickup_address,
          delivery_address: bookingData.delivery_address,
          
          // Additional info
          special_instructions: bookingData.special_instructions,
          coi_required: bookingData.coi_required,
        };
      }

      const response = await apiClient.post(endpoint, bookingRequest);
      return response.data;
    },
    onSuccess: (data) => {
      setBookingNumber(data.booking.booking_number);
      setBookingCompleteLocal(true);
      setBookingComplete(data.booking.booking_number); // Update store
      setLoading(false);
      
      // Invalidate dashboard cache for authenticated users
      if (isAuthenticated) {
        queryClient.invalidateQueries({ queryKey: ['customer', 'dashboard'] });
        queryClient.invalidateQueries({ queryKey: ['customer', 'bookings'] });
      }
    },
    onError: (error: AxiosError | Error) => {
      setLoading(false);
      console.error('Booking creation failed:', error);
      
      // Check if it's an AxiosError before accessing response
      if ('response' in error && error.response) {
        console.error('Error response:', error.response.data);
      }
    }
  });

  const handleSubmitBooking = () => {
    setLoading(true);
    createBookingMutation.mutate();
  };

  const handleStartOver = () => {
    console.log('🔄 Starting over - resetting wizard and navigating to fresh booking page');
    resetWizard();
    setBookingCompleteLocal(false);
    setBookingNumber('');
    
    // Force navigation to fresh booking page with reset flag
    router.push('/book?reset=true');
  };

  const handleGoToDashboard = () => {
    if (isAuthenticated) {
      router.push('/dashboard');
    } else {
      router.push('/');
    }
  };

  if (bookingComplete) {
    return (
      <div className="text-center space-y-6">
        <div className="text-6xl mb-4">✅</div>
        
        <Card variant="luxury">
          <CardContent>
            <h3 className="text-2xl font-serif font-bold text-navy-900 mb-4">
              Booking Confirmed!
            </h3>
            
            <div className="space-y-3">
              <div className="bg-gold-50 border border-gold-200 rounded-lg p-4">
                <span className="text-sm text-gold-700">Your Booking Number</span>
                <div className="text-2xl font-bold text-navy-900">{bookingNumber}</div>
              </div>
              
              <p className="text-navy-700">
                Your luxury move is confirmed. 
                {isAuthenticated ? (
                  ' Check your dashboard for booking details.'
                ) : (
                  <>
                    We'll send a confirmation email to{' '}
                    <strong>{bookingData.customer_info?.email}</strong> with all the details.
                  </>
                )}
              </p>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                <div className="text-left">
                  <span className="font-medium text-navy-900">Pickup:</span>
                  <p className="text-navy-700">
                    {new Date(bookingData.pickup_date!).toLocaleDateString()} at{' '}
                    {bookingData.pickup_time === 'morning' ? '8-11 AM' : 
                     bookingData.pickup_time === 'afternoon' ? '12-3 PM' : '4-7 PM'}
                  </p>
                  <p className="text-navy-600">
                    {bookingData.pickup_address?.address_line_1}, {bookingData.pickup_address?.city}
                  </p>
                </div>
                
                <div className="text-left">
                  <span className="font-medium text-navy-900">Total:</span>
                  <p className="text-2xl font-bold text-navy-900">
                    ${bookingData.pricing_data?.total_price_dollars}
                  </p>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>

        <div className="space-y-4">
          <h4 className="text-lg font-medium text-navy-900">What's Next?</h4>
          
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
            <Card variant="default">
              <CardContent>
                <div className="text-center">
                  <div className="text-2xl mb-2">📧</div>
                  <h5 className="font-medium text-navy-900 mb-1">Confirmation Email</h5>
                  <p className="text-navy-600">Check your email for booking details and our team contact info.</p>
                </div>
              </CardContent>
            </Card>
            
            <Card variant="default">
              <CardContent>
                <div className="text-center">
                  <div className="text-2xl mb-2">📞</div>
                  <h5 className="font-medium text-navy-900 mb-1">Coordination Call</h5>
                  <p className="text-navy-600">We'll call 24 hours before pickup to confirm timing.</p>
                </div>
              </CardContent>
            </Card>
            
            <Card variant="default">
              <CardContent>
                <div className="text-center">
                  <div className="text-2xl mb-2">🚛</div>
                  <h5 className="font-medium text-navy-900 mb-1">White Glove Service</h5>
                  <p className="text-navy-600">Our professional team handles everything with care.</p>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>

        <div className="flex flex-col sm:flex-row justify-center gap-4">
          <Button 
            variant="outline" 
            onClick={handleStartOver}
            className="w-full sm:w-auto"
          >
            Book Another Move
          </Button>
          <Button 
            variant="primary" 
            onClick={handleGoToDashboard}
            className="w-full sm:w-auto"
          >
            {isAuthenticated ? 'Back to Dashboard' : 'Back to Home'}
          </Button>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Booking Summary */}
      <Card variant="luxury">
        <CardHeader>
          <h3 className="text-xl font-serif font-bold text-navy-900">Booking Summary</h3>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {/* Service Details */}
            <div>
              <h4 className="font-medium text-navy-900 mb-2">Service</h4>
              <p className="text-navy-700">
                {bookingData.service_type === 'mini_move' && 'Mini Move'}
                {bookingData.service_type === 'standard_delivery' && 'Standard Delivery'}
                {bookingData.service_type === 'specialty_item' && 'Specialty Items'}
              </p>
              
              {bookingData.include_packing && (
                <p className="text-sm text-navy-600">+ Professional Packing</p>
              )}
              {bookingData.include_unpacking && (
                <p className="text-sm text-navy-600">+ Professional Unpacking</p>
              )}
            </div>

            {/* Date & Time */}
            <div>
              <h4 className="font-medium text-navy-900 mb-2">Pickup Schedule</h4>
              <p className="text-navy-700">
                {new Date(bookingData.pickup_date!).toLocaleDateString('en-US', {
                  weekday: 'long',
                  year: 'numeric',
                  month: 'long',
                  day: 'numeric'
                })}
              </p>
              <p className="text-navy-600">
                {bookingData.pickup_time === 'morning' && '8:00 AM - 11:00 AM'}
                {bookingData.pickup_time === 'afternoon' && '12:00 PM - 3:00 PM'}
                {bookingData.pickup_time === 'evening' && '4:00 PM - 7:00 PM'}
              </p>
            </div>

            {/* Addresses */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <h4 className="font-medium text-navy-900 mb-2">Pickup Address</h4>
                <div className="text-navy-700 text-sm">
                  <div>{bookingData.pickup_address?.address_line_1}</div>
                  {bookingData.pickup_address?.address_line_2 && (
                    <div>{bookingData.pickup_address.address_line_2}</div>
                  )}
                  <div>
                    {bookingData.pickup_address?.city}, {bookingData.pickup_address?.state} {bookingData.pickup_address?.zip_code}
                  </div>
                </div>
              </div>
              
              <div>
                <h4 className="font-medium text-navy-900 mb-2">Delivery Address</h4>
                <div className="text-navy-700 text-sm">
                  <div>{bookingData.delivery_address?.address_line_1}</div>
                  {bookingData.delivery_address?.address_line_2 && (
                    <div>{bookingData.delivery_address.address_line_2}</div>
                  )}
                  <div>
                    {bookingData.delivery_address?.city}, {bookingData.delivery_address?.state} {bookingData.delivery_address?.zip_code}
                  </div>
                </div>
              </div>
            </div>

            {/* Customer Info - only show for guest bookings */}
            {!isAuthenticated && (
              <div>
                <h4 className="font-medium text-navy-900 mb-2">Contact Information</h4>
                <div className="text-navy-700">
                  <div>
                    {bookingData.customer_info?.first_name} {bookingData.customer_info?.last_name}
                  </div>
                  <div>{bookingData.customer_info?.email}</div>
                  <div>{bookingData.customer_info?.phone}</div>
                </div>
              </div>
            )}

            {/* Special Instructions */}
            {bookingData.special_instructions && (
              <div>
                <h4 className="font-medium text-navy-900 mb-2">Special Instructions</h4>
                <p className="text-navy-700 text-sm bg-gray-50 p-3 rounded">
                  {bookingData.special_instructions}
                </p>
              </div>
            )}
          </div>
        </CardContent>
      </Card>

      {/* Pricing Breakdown */}
      {bookingData.pricing_data && (
        <Card variant="elevated">
          <CardHeader>
            <h3 className="text-xl font-serif font-bold text-navy-900">Pricing</h3>
          </CardHeader>
          <CardContent>
            <div className="space-y-2">
              <div className="flex justify-between">
                <span className="text-navy-700">Base Price:</span>
                <span className="font-medium">${bookingData.pricing_data.base_price_dollars}</span>
              </div>
              
              {bookingData.pricing_data.surcharge_dollars > 0 && (
                <div className="flex justify-between">
                  <span className="text-navy-700">Date Surcharges:</span>
                  <span className="font-medium">+${bookingData.pricing_data.surcharge_dollars}</span>
                </div>
              )}
              
              {bookingData.pricing_data.coi_fee_dollars > 0 && (
                <div className="flex justify-between">
                  <span className="text-navy-700">COI Fee:</span>
                  <span className="font-medium">+${bookingData.pricing_data.coi_fee_dollars}</span>
                </div>
              )}
              
              {bookingData.pricing_data.organizing_total_dollars > 0 && (
                <div className="flex justify-between">
                  <span className="text-navy-700">Organizing Services:</span>
                  <span className="font-medium">+${bookingData.pricing_data.organizing_total_dollars}</span>
                </div>
              )}
              
              <hr className="border-gray-200" />
              
              <div className="flex justify-between text-xl font-bold">
                <span className="text-navy-900">Total:</span>
                <span className="text-navy-900">${bookingData.pricing_data.total_price_dollars}</span>
              </div>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Payment Notice */}
      <Card variant="default" className="border-gold-200 bg-gold-50">
        <CardContent>
          <div className="text-center">
            <h4 className="font-medium text-navy-900 mb-2">Payment</h4>
            <p className="text-navy-700 text-sm">
              For this demo, we'll create your booking without payment processing. 
              In production, this would integrate with Stripe for secure payment.
            </p>
          </div>
        </CardContent>
      </Card>

      {/* Submit Button */}
      <div className="flex justify-center">
        <Button 
          variant="primary" 
          size="lg"
          onClick={handleSubmitBooking}
          disabled={isLoading || createBookingMutation.isPending}
          className="w-full sm:w-auto"
        >
          {isLoading || createBookingMutation.isPending ? 'Creating Booking...' : 'Confirm Booking'}
        </Button>
      </div>
    </div>
  );
}
```

# ==== src/components/booking/service-selection-step.tsx ====

```
// frontend/src/components/booking/service-selection-step.tsx
'use client';

import { useQuery, useMutation } from '@tanstack/react-query';
import { apiClient } from '@/lib/api-client';
import { useBookingWizard } from '@/stores/booking-store';
import { Card, CardContent, CardHeader } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import type { ServiceCatalog } from '@/types';

export function ServiceSelectionStep() {
  const { bookingData, updateBookingData, nextStep } = useBookingWizard();

  const { data: services, isLoading } = useQuery({
    queryKey: ['services', 'catalog'],
    queryFn: async (): Promise<ServiceCatalog> => {
      const response = await apiClient.get('/api/public/services/');
      return response.data;
    }
  });

  const handleMiniMoveSelect = (packageId: string) => {
    updateBookingData({
      service_type: 'mini_move',
      mini_move_package_id: packageId,
      // Clear other service selections
      standard_delivery_item_count: undefined,
      specialty_item_ids: undefined,
    });
  };

  const handleOrganizingServiceToggle = (serviceType: 'packing' | 'unpacking', enabled: boolean) => {
    updateBookingData({
      [serviceType === 'packing' ? 'include_packing' : 'include_unpacking']: enabled
    });
  };

  const canContinue = () => {
    return (
      (bookingData.service_type === 'mini_move' && bookingData.mini_move_package_id) ||
      (bookingData.service_type === 'standard_delivery' && bookingData.standard_delivery_item_count && bookingData.standard_delivery_item_count >= (services?.standard_delivery?.minimum_items || 3)) ||
      (bookingData.service_type === 'specialty_item' && bookingData.specialty_item_ids?.length)
    );
  };

  if (isLoading) {
    return (
      <div className="space-y-4">
        {[1, 2, 3].map(i => (
          <div key={i} className="animate-pulse">
            <div className="h-32 bg-navy-200 rounded-lg"></div>
          </div>
        ))}
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Service Type Selector */}
      <div>
        <h3 className="text-lg font-medium text-navy-900 mb-4">Choose Your Service</h3>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <button
            onClick={() => updateBookingData({ service_type: 'mini_move' })}
            className={`p-4 rounded-lg border-2 text-left transition-all ${
              bookingData.service_type === 'mini_move'
                ? 'border-navy-500 bg-navy-50'
                : 'border-gray-200 hover:border-gray-300'
            }`}
          >
            <h4 className="font-medium text-navy-900 mb-2">Mini Moves</h4>
            <p className="text-sm text-navy-600">Complete packages for seasonal relocation</p>
          </button>

          <button
            onClick={() => updateBookingData({ service_type: 'standard_delivery' })}
            className={`p-4 rounded-lg border-2 text-left transition-all ${
              bookingData.service_type === 'standard_delivery'
                ? 'border-navy-500 bg-navy-50'
                : 'border-gray-200 hover:border-gray-300'
            }`}
          >
            <h4 className="font-medium text-navy-900 mb-2">Standard Delivery</h4>
            <p className="text-sm text-navy-600">Individual items, priced per piece</p>
          </button>

          <button
            onClick={() => updateBookingData({ service_type: 'specialty_item' })}
            className={`p-4 rounded-lg border-2 text-left transition-all ${
              bookingData.service_type === 'specialty_item'
                ? 'border-navy-500 bg-navy-50'
                : 'border-gray-200 hover:border-gray-300'
            }`}
          >
            <h4 className="font-medium text-navy-900 mb-2">Specialty Items</h4>
            <p className="text-sm text-navy-600">Pelotons, surfboards, and more</p>
          </button>
        </div>
      </div>

      {/* Mini Moves */}
      {bookingData.service_type === 'mini_move' && services?.mini_move_packages && (
        <div>
          <h3 className="text-lg font-medium text-navy-900 mb-4">Select Package</h3>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            {services.mini_move_packages.map((pkg) => (
              <Card 
                key={pkg.id} 
                variant={bookingData.mini_move_package_id === pkg.id ? "luxury" : "default"}
                className="cursor-pointer"
                onClick={() => handleMiniMoveSelect(pkg.id)}
              >
                <CardHeader>
                  <div className="text-center">
                    <h4 className="font-medium text-navy-900">{pkg.name}</h4>
                    {pkg.is_most_popular && (
                      <span className="inline-block bg-gold-100 text-gold-800 text-xs px-2 py-1 rounded-full mt-1">
                        Most Popular
                      </span>
                    )}
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="text-center">
                    <div className="text-2xl font-bold text-navy-900 mb-2">
                      ${pkg.base_price_dollars}
                    </div>
                    <p className="text-navy-600 text-sm mb-3">{pkg.description}</p>
                    <p className="text-xs text-navy-500">
                      {pkg.max_items ? `Up to ${pkg.max_items} items` : 'Unlimited items'}
                    </p>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>

          {/* Organizing Services */}
          {bookingData.mini_move_package_id && (
            <div>
              <h4 className="text-md font-medium text-navy-900 mb-3">Add Organizing Services</h4>
              <div className="space-y-3">
                <label className="flex items-center p-4 border border-gray-200 rounded-lg cursor-pointer hover:bg-gold-50">
                  <input
                    type="checkbox"
                    checked={bookingData.include_packing || false}
                    onChange={(e) => handleOrganizingServiceToggle('packing', e.target.checked)}
                    className="mr-3"
                  />
                  <div>
                    <h5 className="font-medium text-navy-900">Professional Packing</h5>
                    <p className="text-sm text-navy-600">Expert packing at origin</p>
                  </div>
                </label>

                <label className="flex items-center p-4 border border-gray-200 rounded-lg cursor-pointer hover:bg-gold-50">
                  <input
                    type="checkbox"
                    checked={bookingData.include_unpacking || false}
                    onChange={(e) => handleOrganizingServiceToggle('unpacking', e.target.checked)}
                    className="mr-3"
                  />
                  <div>
                    <h5 className="font-medium text-navy-900">Professional Unpacking</h5>
                    <p className="text-sm text-navy-600">Expert organizing at destination</p>
                  </div>
                </label>
              </div>
            </div>
          )}
        </div>
      )}

      {/* Standard Delivery */}
      {bookingData.service_type === 'standard_delivery' && services?.standard_delivery && (
        <div>
          <h3 className="text-lg font-medium text-navy-900 mb-4">Standard Delivery Details</h3>
          <Card variant="elevated">
            <CardContent>
              <div className="space-y-4">
                {/* FIXED: Use Input component with proper dark text styling */}
                <Input
                  label="Number of Items"
                  type="number"
                  min={services.standard_delivery.minimum_items}
                  value={bookingData.standard_delivery_item_count?.toString() || ''}
                  onChange={(e) => updateBookingData({ 
                    standard_delivery_item_count: parseInt(e.target.value) || undefined 
                  })}
                  placeholder={`Minimum ${services.standard_delivery.minimum_items} items`}
                  helper={`$${services.standard_delivery.price_per_item_dollars} per item • $${services.standard_delivery.minimum_charge_dollars} minimum`}
                />

                <label className="flex items-center">
                  <input
                    type="checkbox"
                    checked={bookingData.is_same_day_delivery || false}
                    onChange={(e) => updateBookingData({ is_same_day_delivery: e.target.checked })}
                    className="mr-3"
                  />
                  <span className="text-navy-900 font-medium">
                    Same-Day Delivery (+$${services.standard_delivery.same_day_flat_rate_dollars})
                  </span>
                </label>
              </div>
            </CardContent>
          </Card>
        </div>
      )}

      {/* Specialty Items */}
      {bookingData.service_type === 'specialty_item' && services?.specialty_items && (
        <div>
          <h3 className="text-lg font-medium text-navy-900 mb-4">Select Specialty Items</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {services.specialty_items.map((item) => (
              <label 
                key={item.id}
                className="flex items-center p-4 border border-gray-200 rounded-lg cursor-pointer hover:bg-gray-50 transition-colors"
              >
                <input
                  type="checkbox"
                  checked={bookingData.specialty_item_ids?.includes(item.id) || false}
                  onChange={(e) => {
                    const currentIds = bookingData.specialty_item_ids || [];
                    const newIds = e.target.checked
                      ? [...currentIds, item.id]
                      : currentIds.filter(id => id !== item.id);
                    updateBookingData({ specialty_item_ids: newIds });
                  }}
                  className="mr-4"
                />
                <div className="flex-1">
                  <h4 className="font-medium text-navy-900">{item.name}</h4>
                  <p className="text-sm text-navy-600 mb-1">{item.description}</p>
                  <div className="text-lg font-bold text-navy-900">${item.price_dollars}</div>
                </div>
              </label>
            ))}
          </div>
        </div>
      )}

      {/* Continue Button */}
      <div className="flex justify-end pt-4">
        <Button
          onClick={nextStep}
          disabled={!canContinue()}
          size="lg"
        >
          Continue to Date & Time →
        </Button>
      </div>
    </div>
  );
}
```

# ==== src/components/dashboard/booking-history.tsx ====

```
// frontend/src/components/dashboard/booking-history.tsx
'use client';

import { useState } from 'react';
import { useQuery } from '@tanstack/react-query';
import { apiClient } from '@/lib/api-client';
import { useAuthStore } from '@/stores/auth-store';
import { Card, CardContent, CardHeader } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Select } from '@/components/ui/select';

interface Booking {
  id: string;
  booking_number: string;
  service_type: string;
  status: string;
  pickup_date: string;
  pickup_time?: string;
  pickup_address?: {
    address_line_1: string;
    city: string;
    state: string;
  };
  delivery_address?: {
    address_line_1: string;
    city: string;
    state: string;
  };
  total_price: number;
  created_at: string;
}

interface BookingHistoryResponse {
  bookings: Booking[];
  total_count: number;
}

export function BookingHistory() {
  const { user } = useAuthStore();
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState('');

  const { data, isLoading, error, refetch } = useQuery({
    queryKey: ['customer', 'bookings', searchTerm, statusFilter],
    queryFn: async (): Promise<BookingHistoryResponse> => {
      const params = new URLSearchParams();
      if (searchTerm) params.append('search', searchTerm);
      if (statusFilter) params.append('status', statusFilter);
      
      const response = await apiClient.get(`/api/customer/bookings/?${params}`);
      return response.data;
    },
    enabled: !!user,
  });

  const getStatusColor = (status: string) => {
    switch (status.toLowerCase()) {
      case 'completed':
        return 'bg-green-100 text-green-800';
      case 'confirmed':
        return 'bg-blue-100 text-blue-800';
      case 'pending':
        return 'bg-yellow-100 text-yellow-800';
      case 'cancelled':
        return 'bg-red-100 text-red-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  const formatAddress = (address?: Booking['pickup_address']) => {
    if (!address) return 'Address not available';
    return `${address.address_line_1}, ${address.city}, ${address.state}`;
  };

  if (isLoading) {
    return (
      <Card>
        <CardHeader>
          <h2 className="text-xl font-semibold">Booking History</h2>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {[...Array(3)].map((_, i) => (
              <div key={i} className="animate-pulse border border-gray-200 rounded-lg p-4">
                <div className="h-4 bg-gray-200 rounded mb-2"></div>
                <div className="h-3 bg-gray-200 rounded w-1/2"></div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    );
  }

  if (error) {
    return (
      <Card>
        <CardContent className="p-6 text-center">
          <p className="text-red-600 mb-4">Failed to load booking history</p>
          <Button variant="outline" onClick={() => refetch()}>
            Retry
          </Button>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card>
      <CardHeader>
        <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
          <h2 className="text-xl font-semibold text-navy-900">Booking History</h2>
          <div className="text-sm text-navy-600">
            {data?.total_count || 0} total bookings
          </div>
        </div>

        <div className="flex flex-col sm:flex-row gap-4 mt-4">
          <div className="flex-1">
            <Input
              placeholder="Search bookings..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
          </div>
          <Select
            value={statusFilter}
            onChange={(e) => setStatusFilter(e.target.value)}
            options={[
              { value: '', label: 'All Status' },
              { value: 'pending', label: 'Pending' },
              { value: 'confirmed', label: 'Confirmed' },
              { value: 'completed', label: 'Completed' },
              { value: 'cancelled', label: 'Cancelled' },
            ]}
          />
        </div>
      </CardHeader>

      <CardContent>
        {!data?.bookings || data.bookings.length === 0 ? (
          <div className="text-center py-8">
            <div className="text-6xl mb-4">📦</div>
            <h3 className="text-lg font-medium text-navy-900 mb-2">No bookings yet</h3>
            <p className="text-navy-600 mb-4">
              Start your ToteTaxi experience by booking your first move
            </p>
            <Button variant="primary">
              Book Your First Move
            </Button>
          </div>
        ) : (
          <div className="space-y-4">
            {data.bookings.map((booking) => (
              <div
                key={booking.id}
                className="border border-cream-200 rounded-lg p-6 hover:shadow-md transition-shadow"
              >
                <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4">
                  <div className="flex-1">
                    <div className="flex items-center gap-4 mb-3">
                      <h3 className="font-semibold text-navy-900">
                        #{booking.booking_number}
                      </h3>
                      <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(booking.status)}`}>
                        {booking.status}
                      </span>
                    </div>
                    
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                      <div>
                        <p className="font-medium text-navy-700">Service</p>
                        <p className="text-navy-600">{booking.service_type}</p>
                      </div>
                      <div>
                        <p className="font-medium text-navy-700">Date & Time</p>
                        <p className="text-navy-600">
                          {new Date(booking.pickup_date).toLocaleDateString()}
                          {booking.pickup_time && ` - ${booking.pickup_time}`}
                        </p>
                      </div>
                      {booking.pickup_address && (
                        <div>
                          <p className="font-medium text-navy-700">From</p>
                          <p className="text-navy-600">{formatAddress(booking.pickup_address)}</p>
                        </div>
                      )}
                      {booking.delivery_address && (
                        <div>
                          <p className="font-medium text-navy-700">To</p>
                          <p className="text-navy-600">{formatAddress(booking.delivery_address)}</p>
                        </div>
                      )}
                    </div>
                  </div>

                  <div className="text-right">
                    <div className="text-2xl font-bold text-navy-900 mb-2">
                      ${booking.total_price}
                    </div>
                    <div className="space-y-2">
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => alert('Booking details coming soon!')}
                      >
                        View Details
                      </Button>
                      {booking.status === 'completed' && (
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => alert('Rebook functionality coming soon!')}
                        >
                          Book Again
                        </Button>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}
      </CardContent>
    </Card>
  );
}
```

# ==== src/components/dashboard/dashboard-overview.tsx ====

```
// src/components/dashboard/dashboard-overview.tsx
'use client';

import { useQuery, useQueryClient } from '@tanstack/react-query';
import { apiClient } from '@/lib/api-client';
import { useAuthStore } from '@/stores/auth-store';
import { Card, CardContent, CardHeader } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { useRouter } from 'next/navigation';

interface DashboardData {
  customer_profile: {
    name: string;
    email: string;
    phone: string;
    is_vip: boolean;
    total_bookings: number;
    total_spent_dollars: number;
    last_booking_at: string | null;
  };
  booking_summary: {
    pending_bookings: number;
    completed_bookings: number;
    total_bookings: number;
  };
  recent_bookings: Array<{
    id: string;
    booking_number: string;
    customer_name: string;
    service_type: string;
    status: string;
    pickup_date: string;
    pickup_time: string;
    total_price_dollars: number;
    can_rebook: boolean;
    created_at: string;
  }>;
  saved_addresses_count: number;
  payment_methods_count: number;
}

export function DashboardOverview() {
  const { user } = useAuthStore();
  const router = useRouter();

  const { data: dashboardData, isLoading, error, refetch } = useQuery({
    queryKey: ['customer', 'dashboard'],
    queryFn: async (): Promise<DashboardData> => {
      const response = await apiClient.get('/api/customer/dashboard/');
      return response.data;
    },
    enabled: !!user,
    staleTime: 0,
    gcTime: 0,
  });

  if (isLoading) {
    return (
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {[...Array(3)].map((_, i) => (
          <Card key={i} className="animate-pulse">
            <CardContent className="p-6">
              <div className="h-4 bg-gray-200 rounded mb-2"></div>
              <div className="h-8 bg-gray-200 rounded"></div>
            </CardContent>
          </Card>
        ))}
      </div>
    );
  }

  if (error) {
    return (
      <Card>
        <CardContent className="p-6 text-center">
          <p className="text-red-600">Failed to load dashboard data</p>
          <Button 
            variant="outline" 
            onClick={() => refetch()}
            className="mt-4"
          >
            Retry
          </Button>
        </CardContent>
      </Card>
    );
  }

  const profile = dashboardData?.customer_profile;
  const bookingSummary = dashboardData?.booking_summary;

  return (
    <div className="space-y-6">
      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        <Card>
          <CardHeader>
            <h3 className="text-sm font-medium text-navy-600">Total Bookings</h3>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-navy-900">
              {profile?.total_bookings || 0}
            </div>
            <p className="text-xs text-navy-600">
              {profile?.last_booking_at 
                ? `Last booking: ${new Date(profile.last_booking_at).toLocaleDateString()}`
                : 'No bookings yet'
              }
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <h3 className="text-sm font-medium text-navy-600">Total Spent</h3>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-navy-900">
              ${profile?.total_spent_dollars || 0}
            </div>
            <p className="text-xs text-navy-600">Lifetime value</p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <h3 className="text-sm font-medium text-navy-600">Account Status</h3>
          </CardHeader>
          <CardContent>
            <div className="flex items-center">
              {profile?.is_vip ? (
                <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gold-100 text-gold-800">
                  VIP Member
                </span>
              ) : (
                <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-navy-100 text-navy-800">
                  Standard
                </span>
              )}
            </div>
            <p className="text-xs text-navy-600 mt-1">
              {profile?.is_vip 
                ? 'Priority scheduling & exclusive benefits'
                : 'Book 3+ moves to unlock VIP status'
              }
            </p>
          </CardContent>
        </Card>
      </div>

      {/* Booking Summary */}
      {bookingSummary && (
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <Card>
            <CardContent className="p-4 text-center">
              <div className="text-lg font-semibold text-navy-900">{bookingSummary.pending_bookings}</div>
              <div className="text-sm text-navy-600">Pending Bookings</div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-4 text-center">
              <div className="text-lg font-semibold text-navy-900">{bookingSummary.completed_bookings}</div>
              <div className="text-sm text-navy-600">Completed Bookings</div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-4 text-center">
              <div className="text-lg font-semibold text-navy-900">{bookingSummary.total_bookings}</div>
              <div className="text-sm text-navy-600">Total Bookings</div>
            </CardContent>
          </Card>
        </div>
      )}

      {/* Recent Bookings */}
      {dashboardData?.recent_bookings && dashboardData.recent_bookings.length > 0 && (
        <Card>
          <CardHeader className="flex flex-row items-center justify-between">
            <h3 className="text-lg font-medium text-navy-900">Recent Bookings</h3>
            <Button 
              variant="ghost" 
              onClick={() => router.push('/dashboard/bookings')}
            >
              View All
            </Button>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {dashboardData.recent_bookings.slice(0, 3).map((booking) => (
                <div key={booking.id} className="flex items-center justify-between p-4 border border-cream-200 rounded-lg">
                  <div>
                    <p className="font-medium text-navy-900">#{booking.booking_number}</p>
                    <p className="text-sm text-navy-600">{booking.service_type}</p>
                    <p className="text-xs text-navy-500">
                      {new Date(booking.pickup_date).toLocaleDateString()}
                    </p>
                  </div>
                  <div className="text-right">
                    <p className="font-medium text-navy-900">${booking.total_price_dollars}</p>
                    <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
                      booking.status === 'completed' 
                        ? 'bg-green-100 text-green-800'
                        : booking.status === 'pending'
                        ? 'bg-yellow-100 text-yellow-800' 
                        : 'bg-blue-100 text-blue-800'
                    }`}>
                      {booking.status}
                    </span>
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}

      {/* Quick Stats Summary */}
      <Card>
        <CardContent className="p-6">
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-center">
            <div>
              <div className="text-xl font-bold text-navy-900">{dashboardData?.saved_addresses_count || 0}</div>
              <div className="text-sm text-navy-600">Saved Addresses</div>
            </div>
            <div>
              <div className="text-xl font-bold text-navy-900">{dashboardData?.payment_methods_count || 0}</div>
              <div className="text-sm text-navy-600">Payment Methods</div>
            </div>
            <div>
              <div className="text-xl font-bold text-navy-900">{bookingSummary?.pending_bookings || 0}</div>
              <div className="text-sm text-navy-600">Upcoming</div>
            </div>
            <div>
              <div className="text-xl font-bold text-navy-900">{bookingSummary?.completed_bookings || 0}</div>
              <div className="text-sm text-navy-600">Complete</div>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
```

# ==== src/components/dashboard/quick-actions.tsx ====

```

```

# ==== src/components/layout/main-layout.tsx ====

```
// frontend/src/components/layout/main-layout.tsx
'use client';

import { cn } from '@/utils/cn';
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { UserMenu } from '@/components/auth/user-menu';
import { useAuthStore } from '@/stores/auth-store';
import { useState } from 'react';
import { Bars3Icon, XMarkIcon } from '@heroicons/react/24/outline';

interface MainLayoutProps {
  children: React.ReactNode;
  className?: string;
  onBookNowClick?: () => void;
}

export function MainLayout({ children, className, onBookNowClick }: MainLayoutProps) {
  const { isAuthenticated, user } = useAuthStore();
  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);

  return (
    <div className={cn(
      'min-h-screen bg-gradient-to-br from-cream-50 to-cream-100',
      className
    )}>
      {/* Header */}
      <header className="border-b border-cream-200 bg-white/80 backdrop-blur-sm sticky top-0 z-40">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            {/* Logo */}
            <Link href="/" className="text-2xl font-serif font-bold text-navy-900 hover:text-navy-700 transition-colors">
              ToteTaxi
            </Link>
            
            {/* Desktop Navigation */}
            <nav className="hidden lg:flex items-center space-x-8">
              <Link href="/services" className="text-navy-700 hover:text-navy-900 transition-colors font-medium">
                Services
              </Link>
              <Link href="/about" className="text-navy-700 hover:text-navy-900 transition-colors font-medium">
                About
              </Link>
              <Link href="/faq" className="text-navy-700 hover:text-navy-900 transition-colors font-medium">
                FAQ
              </Link>
              <Link href="/contact" className="text-navy-700 hover:text-navy-900 transition-colors font-medium">
                Contact
              </Link>
              
              {/* Auth-Aware Navigation */}
              {isAuthenticated ? (
                <div className="flex items-center space-x-4">
                  <Link href="/dashboard" className="text-navy-700 hover:text-navy-900 transition-colors font-medium">
                    Dashboard
                  </Link>
                  <UserMenu />
                </div>
              ) : (
                <div className="flex items-center space-x-4">
                  <Link href="/login">
                    <Button variant="ghost">
                      Sign In
                    </Button>
                  </Link>
                  {onBookNowClick ? (
                    <Button variant="primary" onClick={onBookNowClick}>
                      Book Now
                    </Button>
                  ) : (
                    <Link href="/book">
                      <Button variant="primary">
                        Book Now
                      </Button>
                    </Link>
                  )}
                </div>
              )}
            </nav>

            {/* Mobile Menu Button */}
            <div className="lg:hidden">
              <button
                onClick={() => setMobileMenuOpen(!mobileMenuOpen)}
                className="text-navy-700 hover:text-navy-900"
              >
                {mobileMenuOpen ? (
                  <XMarkIcon className="h-6 w-6" />
                ) : (
                  <Bars3Icon className="h-6 w-6" />
                )}
              </button>
            </div>
          </div>

          {/* Mobile Menu */}
          {mobileMenuOpen && (
            <div className="lg:hidden mt-4 pb-4 border-t border-cream-200">
              <nav className="flex flex-col space-y-4 mt-4">
                <Link 
                  href="/services" 
                  className="text-navy-700 hover:text-navy-900 transition-colors font-medium"
                  onClick={() => setMobileMenuOpen(false)}
                >
                  Services
                </Link>
                <Link 
                  href="/about" 
                  className="text-navy-700 hover:text-navy-900 transition-colors font-medium"
                  onClick={() => setMobileMenuOpen(false)}
                >
                  About
                </Link>
                <Link 
                  href="/faq" 
                  className="text-navy-700 hover:text-navy-900 transition-colors font-medium"
                  onClick={() => setMobileMenuOpen(false)}
                >
                  FAQ
                </Link>
                <Link 
                  href="/contact" 
                  className="text-navy-700 hover:text-navy-900 transition-colors font-medium"
                  onClick={() => setMobileMenuOpen(false)}
                >
                  Contact
                </Link>
                
                {/* Mobile Auth Section */}
                {isAuthenticated ? (
                  <>
                    <Link 
                      href="/dashboard" 
                      className="text-navy-700 hover:text-navy-900 transition-colors font-medium"
                      onClick={() => setMobileMenuOpen(false)}
                    >
                      Dashboard
                    </Link>
                    <UserMenu variant="mobile" />
                  </>
                ) : (
                  <div className="flex flex-col space-y-2 pt-4 border-t border-cream-200">
                    <Link href="/login" onClick={() => setMobileMenuOpen(false)}>
                      <Button variant="ghost" className="w-full justify-start">
                        Sign In
                      </Button>
                    </Link>
                    <Link href="/register" onClick={() => setMobileMenuOpen(false)}>
                      <Button variant="outline" className="w-full justify-start">
                        Create Account
                      </Button>
                    </Link>
                    {onBookNowClick ? (
                      <Button 
                        variant="primary" 
                        onClick={() => {
                          onBookNowClick();
                          setMobileMenuOpen(false);
                        }}
                        className="w-full"
                      >
                        Book Now
                      </Button>
                    ) : (
                      <Link href="/book" onClick={() => setMobileMenuOpen(false)}>
                        <Button variant="primary" className="w-full">
                          Book Now
                        </Button>
                      </Link>
                    )}
                  </div>
                )}
              </nav>
            </div>
          )}
        </div>
      </header>

      {/* Main content */}
      <main className="flex-1">
        {children}
      </main>

      {/* Footer remains the same */}
      <footer className="bg-navy-900 text-white py-12">
        <div className="container mx-auto px-4">
          <div className="grid grid-cols-1 md:grid-cols-4 gap-8">
            <div>
              <div className="text-xl font-serif mb-4">ToteTaxi</div>
              <p className="text-navy-300 text-sm">
                Luxury delivery service for Manhattan to Hamptons transport
              </p>
            </div>
            <div>
              <h4 className="font-medium mb-4">Services</h4>
              <ul className="space-y-2 text-navy-300 text-sm">
                <li><Link href="/services#mini-moves" className="hover:text-white transition-colors">Mini Moves</Link></li>
                <li><Link href="/services#standard-delivery" className="hover:text-white transition-colors">Standard Delivery</Link></li>
                <li><Link href="/services#specialty-items" className="hover:text-white transition-colors">Specialty Items</Link></li>
                <li><Link href="/services#organizing" className="hover:text-white transition-colors">Organizing Services</Link></li>
              </ul>
            </div>
            <div>
              <h4 className="font-medium mb-4">Company</h4>
              <ul className="space-y-2 text-navy-300 text-sm">
                <li><Link href="/about" className="hover:text-white transition-colors">About Us</Link></li>
                <li><Link href="/faq" className="hover:text-white transition-colors">FAQ</Link></li>
                <li><Link href="/contact" className="hover:text-white transition-colors">Contact</Link></li>
              </ul>
            </div>
            <div>
              <h4 className="font-medium mb-4">Contact</h4>
              <div className="text-navy-300 text-sm space-y-1">
                <p>(555) TOTE-TAXI</p>
                <p>hello@totetaxi.com</p>
                <p>Manhattan to Hamptons</p>
              </div>
            </div>
          </div>
          <div className="border-t border-navy-800 mt-8 pt-8 text-center text-navy-400 text-sm">
            <p>&copy; 2024 ToteTaxi. All rights reserved. | Premium delivery service for discerning clients.</p>
          </div>
        </div>
      </footer>
    </div>
  );
}
```

# ==== src/components/marketing/service-showcase.tsx ====

```
// frontend/src/components/marketing/service-showcase.tsx
'use client';

import { useQuery } from '@tanstack/react-query';
import { apiClient } from '@/lib/api-client';
import { Card, CardHeader, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import type { ServiceCatalog } from '@/types';

export function ServiceShowcase() {
  const { data: services, isLoading, error } = useQuery({
    queryKey: ['services', 'catalog'],
    queryFn: async (): Promise<ServiceCatalog> => {
      const response = await apiClient.get('/api/public/services/');
      return response.data;
    }
  });

  if (isLoading) {
    return (
      <section className="py-16 bg-cream-50">
        <div className="container mx-auto px-4">
          <div className="text-center">
            <div className="animate-pulse">
              <div className="h-8 bg-navy-200 rounded w-64 mx-auto mb-4"></div>
              <div className="h-4 bg-navy-100 rounded w-96 mx-auto"></div>
            </div>
          </div>
        </div>
      </section>
    );
  }

  if (error) {
    return (
      <section className="py-16 bg-cream-50">
        <div className="container mx-auto px-4 text-center">
          <p className="text-red-600">Unable to load services</p>
        </div>
      </section>
    );
  }

  return (
    <section className="py-16 bg-cream-50">
      <div className="container mx-auto px-4">
        {/* Section Header */}
        <div className="text-center mb-12">
          <h2 className="text-3xl font-serif font-bold text-navy-900 mb-4">
            Our Luxury Services
          </h2>
          <p className="text-lg text-navy-700 max-w-2xl mx-auto">
            From weekend getaways to seasonal relocations, we handle your Hamptons transport with premium care.
          </p>
        </div>

        {/* Mini Move Packages */}
        <div className="mb-16">
          <h3 className="text-2xl font-serif font-bold text-navy-900 text-center mb-8">
            Mini Moves
          </h3>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
            {services?.mini_move_packages?.map((pkg) => (
              <Card 
                key={pkg.id} 
                variant={pkg.is_most_popular ? "luxury" : "elevated"}
                className="relative"
              >
                {pkg.is_most_popular && (
                  <div className="absolute -top-3 left-1/2 transform -translate-x-1/2">
                    <span className="bg-gold-500 text-navy-900 px-4 py-1 rounded-full text-sm font-medium">
                      Most Popular
                    </span>
                  </div>
                )}
                
                <CardHeader>
                  <div className="text-center">
                    <h4 className="text-xl font-serif font-bold text-navy-900 mb-2">
                      {pkg.name}
                    </h4>
                    <div className="text-3xl font-bold text-navy-900 mb-2">
                      ${pkg.base_price_dollars}
                    </div>
                    {pkg.max_items && (
                      <p className="text-navy-600 text-sm">
                        Up to {pkg.max_items} items
                      </p>
                    )}
                  </div>
                </CardHeader>
                
                <CardContent>
                  <p className="text-navy-700 text-sm mb-4">{pkg.description}</p>
                  
                  <ul className="space-y-2 mb-6">
                    {pkg.coi_included && (
                      <li className="flex items-center text-sm text-navy-700">
                        <span className="text-green-500 mr-2">✓</span>
                        COI Included
                      </li>
                    )}
                    {pkg.priority_scheduling && (
                      <li className="flex items-center text-sm text-navy-700">
                        <span className="text-green-500 mr-2">✓</span>
                        Priority Scheduling
                      </li>
                    )}
                    {pkg.protective_wrapping && (
                      <li className="flex items-center text-sm text-navy-700">
                        <span className="text-green-500 mr-2">✓</span>
                        Protective Wrapping
                      </li>
                    )}
                  </ul>
                  
                  <Button 
                    variant={pkg.is_most_popular ? "primary" : "outline"} 
                    className="w-full"
                  >
                    Select {pkg.name}
                  </Button>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>

        {/* Standard Delivery */}
        {services?.standard_delivery && (
          <div className="mb-16">
            <h3 className="text-2xl font-serif font-bold text-navy-900 text-center mb-8">
              Standard Delivery
            </h3>
            <div className="max-w-2xl mx-auto">
              <Card variant="elevated">
                <CardContent>
                  <div className="text-center">
                    <div className="text-2xl font-bold text-navy-900 mb-2">
                      ${services.standard_delivery.price_per_item_dollars} per item
                    </div>
                    <p className="text-navy-600 mb-4">
                      Minimum {services.standard_delivery.minimum_items} items • ${services.standard_delivery.minimum_charge_dollars} minimum
                    </p>
                    <p className="text-sm text-navy-700 mb-4">
                      Perfect for individual items under {services.standard_delivery.max_weight_per_item_lbs} lbs each
                    </p>
                    <div className="bg-gold-50 border border-gold-200 rounded-lg p-4 mb-4">
                      <p className="text-gold-800 font-medium">
                        Same-Day Delivery: ${services.standard_delivery.same_day_flat_rate_dollars}
                      </p>
                    </div>
                    <Button variant="outline" className="w-full">
                      Calculate Your Delivery
                    </Button>
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>
        )}

        {/* Specialty Items */}
        {services?.specialty_items && services.specialty_items.length > 0 && (
          <div>
            <h3 className="text-2xl font-serif font-bold text-navy-900 text-center mb-8">
              Specialty Items
            </h3>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
              {services.specialty_items.map((item) => (
                <Card key={item.id} variant="default">
                  <CardContent>
                    <div className="text-center">
                      <h4 className="font-medium text-navy-900 mb-2">{item.name}</h4>
                      <div className="text-xl font-bold text-navy-900 mb-2">
                        ${item.price_dollars}
                      </div>
                      <p className="text-navy-600 text-sm mb-3">{item.description}</p>
                      {item.special_handling && (
                        <span className="inline-block bg-gold-100 text-gold-800 text-xs px-2 py-1 rounded">
                          Special Handling
                        </span>
                      )}
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </div>
        )}
      </div>
    </section>
  );
}
```

# ==== src/components/providers/query-provider.tsx ====

```
// frontend/src/components/providers/query-provider.tsx
'use client';

import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { ReactQueryDevtools } from '@tanstack/react-query-devtools';
import { useState } from 'react';
import { queryClient } from '@/lib/query-client';

interface QueryProviderProps {
  children: React.ReactNode;
}

export function QueryProvider({ children }: QueryProviderProps) {
  // Use the pre-configured client
  const [client] = useState(() => queryClient);

  return (
    <QueryClientProvider client={client}>
      {children}
      <ReactQueryDevtools initialIsOpen={false} />
    </QueryClientProvider>
  );
}
```

# ==== src/components/test-api-connection.tsx ====

```
// frontend/src/components/test-api-connection.tsx
'use client';

import { useState } from 'react';
import { useQuery } from '@tanstack/react-query';
import { apiClient } from '@/lib/api-client';
import { Card, CardContent, CardHeader } from '@/components/ui/card';
import { Button } from '@/components/ui/button';

export function TestAPIConnection() {
  const [testResults, setTestResults] = useState<Record<string, any>>({});

  // Test services endpoint
  const { data: services, isLoading: servicesLoading, error: servicesError } = useQuery({
    queryKey: ['test', 'services'],
    queryFn: async () => {
      const response = await apiClient.get('/api/public/services/');
      return response.data;
    }
  });

  // Test availability endpoint
  const testAvailability = async () => {
    try {
      const response = await apiClient.get('/api/public/availability/');
      setTestResults(prev => ({ ...prev, availability: { success: true, data: response.data } }));
    } catch (error) {
      setTestResults(prev => ({ ...prev, availability: { success: false, error: error.message } }));
    }
  };

  // Test pricing preview endpoint
  const testPricing = async () => {
    try {
      const response = await apiClient.post('/api/public/pricing-preview/', {
        service_type: 'mini_move',
        pickup_date: new Date().toISOString().split('T')[0],
        mini_move_package_id: services?.mini_move_packages?.[0]?.id,
        include_packing: false,
        include_unpacking: false,
        coi_required: false
      });
      setTestResults(prev => ({ ...prev, pricing: { success: true, data: response.data } }));
    } catch (error) {
      setTestResults(prev => ({ ...prev, pricing: { success: false, error: error.message } }));
    }
  };

  if (process.env.NODE_ENV === 'production') {
    return null; // Hide in production
  }

  return (
    <Card variant="elevated" className="mb-8">
      <CardHeader>
        <h3 className="text-lg font-medium text-navy-900">API Connection Test</h3>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          {/* Services Test */}
          <div className="flex items-center justify-between p-3 bg-gray-50 rounded">
            <div>
              <span className="font-medium">Services Endpoint:</span>
              <div className="text-sm">
                {servicesLoading && <span className="text-blue-600">Loading...</span>}
                {servicesError && <span className="text-red-600">Error: {servicesError.message}</span>}
                {services && <span className="text-green-600">✓ Connected ({services.mini_move_packages?.length || 0} packages loaded)</span>}
              </div>
            </div>
          </div>

          {/* Availability Test */}
          <div className="flex items-center justify-between p-3 bg-gray-50 rounded">
            <div>
              <span className="font-medium">Availability Test:</span>
              <div className="text-sm">
                {testResults.availability?.success && <span className="text-green-600">✓ Working</span>}
                {testResults.availability?.success === false && (
                  <span className="text-red-600">✗ Failed: {testResults.availability.error}</span>
                )}
              </div>
            </div>
            <Button size="sm" onClick={testAvailability}>Test</Button>
          </div>

          {/* Pricing Test */}
          <div className="flex items-center justify-between p-3 bg-gray-50 rounded">
            <div>
              <span className="font-medium">Pricing Test:</span>
              <div className="text-sm">
                {testResults.pricing?.success && (
                  <span className="text-green-600">
                    ✓ Working (${testResults.pricing.data.pricing.total_price_dollars})
                  </span>
                )}
                {testResults.pricing?.success === false && (
                  <span className="text-red-600">✗ Failed: {testResults.pricing.error}</span>
                )}
              </div>
            </div>
            <Button size="sm" onClick={testPricing} disabled={!services}>Test</Button>
          </div>

          <div className="text-xs text-gray-500 text-center">
            Backend URL: {process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8005'}
          </div>
        </div>
      </CardContent>
    </Card>
  );
}
```

# ==== src/components/ui/button.tsx ====

```
// frontend/src/components/ui/button.tsx
import { cn } from '@/utils/cn';
import { ButtonHTMLAttributes, forwardRef } from 'react';

// Easy to change - all styling in config objects
const buttonVariants = {
  variant: {
    primary: 'bg-navy-900 text-white hover:bg-navy-800 focus:ring-navy-500',
    secondary: 'bg-gold-500 text-navy-900 hover:bg-gold-600 focus:ring-gold-400',
    outline: 'border-2 border-navy-900 text-navy-900 hover:bg-navy-50 focus:ring-navy-300',
    ghost: 'text-navy-900 hover:bg-navy-100 focus:ring-navy-300',
  },
  size: {
    sm: 'px-3 py-2 text-sm',
    md: 'px-4 py-2 text-base',
    lg: 'px-6 py-3 text-lg',
    xl: 'px-8 py-4 text-xl',
  },
  rounded: {
    none: 'rounded-none',
    sm: 'rounded',
    md: 'rounded-md',
    lg: 'rounded-lg',
    full: 'rounded-full',
  }
};

// Base styles that rarely change
const baseStyles = 'inline-flex items-center justify-center font-medium transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed';

interface ButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: keyof typeof buttonVariants.variant;
  size?: keyof typeof buttonVariants.size;
  rounded?: keyof typeof buttonVariants.rounded;
  children: React.ReactNode;
}

export const Button = forwardRef<HTMLButtonElement, ButtonProps>(({
  variant = 'primary',
  size = 'md',
  rounded = 'md',
  className,
  children,
  ...props
}, ref) => {
  return (
    <button
      ref={ref}
      className={cn(
        baseStyles,
        buttonVariants.variant[variant],
        buttonVariants.size[size],
        buttonVariants.rounded[rounded],
        className
      )}
      {...props}
    >
      {children}
    </button>
  );
});

Button.displayName = 'Button';
```

# ==== src/components/ui/card.tsx ====

```
// frontend/src/components/ui/card.tsx
import { cn } from '@/utils/cn';
import { HTMLAttributes, forwardRef } from 'react';

// Easy to change card styling
const cardVariants = {
  variant: {
    default: 'bg-white border border-gray-200',
    elevated: 'bg-white shadow-lg shadow-navy-900/10',
    luxury: 'bg-white border border-gold-200 shadow-xl shadow-navy-900/20',
    ghost: 'bg-transparent border-0',
  },
  padding: {
    none: 'p-0',
    sm: 'p-4',
    md: 'p-6',
    lg: 'p-8',
  },
  rounded: {
    none: 'rounded-none',
    sm: 'rounded',
    md: 'rounded-md',
    lg: 'rounded-lg',
    xl: 'rounded-xl',
  }
};

const baseStyles = 'transition-all duration-200';

interface CardProps extends HTMLAttributes<HTMLDivElement> {
  variant?: keyof typeof cardVariants.variant;
  padding?: keyof typeof cardVariants.padding;
  rounded?: keyof typeof cardVariants.rounded;
  children: React.ReactNode;
}

export const Card = forwardRef<HTMLDivElement, CardProps>(({
  variant = 'default',
  padding = 'md',
  rounded = 'lg',
  className,
  children,
  ...props
}, ref) => {
  return (
    <div
      ref={ref}
      className={cn(
        baseStyles,
        cardVariants.variant[variant],
        cardVariants.padding[padding],
        cardVariants.rounded[rounded],
        className
      )}
      {...props}
    >
      {children}
    </div>
  );
});

Card.displayName = 'Card';

// Subcomponents for structured content
export const CardHeader = forwardRef<HTMLDivElement, HTMLAttributes<HTMLDivElement>>(({
  className,
  children,
  ...props
}, ref) => (
  <div ref={ref} className={cn('pb-4 border-b border-gray-100', className)} {...props}>
    {children}
  </div>
));

CardHeader.displayName = 'CardHeader';

export const CardContent = forwardRef<HTMLDivElement, HTMLAttributes<HTMLDivElement>>(({
  className,
  children,
  ...props
}, ref) => (
  <div ref={ref} className={cn('py-4', className)} {...props}>
    {children}
  </div>
));

CardContent.displayName = 'CardContent';

export const CardFooter = forwardRef<HTMLDivElement, HTMLAttributes<HTMLDivElement>>(({
  className,
  children,
  ...props
}, ref) => (
  <div ref={ref} className={cn('pt-4 border-t border-gray-100', className)} {...props}>
    {children}
  </div>
));

CardFooter.displayName = 'CardFooter';
```

# ==== src/components/ui/index.ts ====

```
// frontend/src/components/ui/index.ts
export { Button } from './button';
export { Input } from './input';
export { Card, CardHeader, CardContent, CardFooter } from './card';
export { Modal } from './modal';
export { Select } from './select';
```

# ==== src/components/ui/input.tsx ====

```
// frontend/src/components/ui/input.tsx
import { cn } from '@/utils/cn';
import { InputHTMLAttributes, forwardRef } from 'react';

// Easy to change input styling
const inputVariants = {
  variant: {
    default: 'border-gray-300 focus:border-navy-500 focus:ring-navy-500',
    error: 'border-red-300 focus:border-red-500 focus:ring-red-500',
    success: 'border-green-300 focus:border-green-500 focus:ring-green-500',
  },
  size: {
    sm: 'px-3 py-2 text-sm',
    md: 'px-4 py-3 text-base',
    lg: 'px-4 py-4 text-lg',
  }
};

// Fixed: Added text-gray-900 for dark, readable text and placeholder styling
const baseStyles = 'block w-full rounded-md shadow-sm transition-colors duration-200 disabled:opacity-50 disabled:cursor-not-allowed text-gray-900 placeholder:text-gray-400 bg-white';

interface InputProps extends InputHTMLAttributes<HTMLInputElement> {
  variant?: keyof typeof inputVariants.variant;
  inputSize?: keyof typeof inputVariants.size;
  label?: string;
  error?: string;
  helper?: string;
}

export const Input = forwardRef<HTMLInputElement, InputProps>(({
  variant = 'default',
  inputSize = 'md',
  label,
  error,
  helper,
  className,
  ...props
}, ref) => {
  const actualVariant = error ? 'error' : variant;

  return (
    <div className="space-y-1">
      {label && (
        <label className="block text-sm font-medium text-navy-900">
          {label}
          {props.required && <span className="text-red-500 ml-1">*</span>}
        </label>
      )}
      <input
        ref={ref}
        className={cn(
          baseStyles,
          inputVariants.variant[actualVariant],
          inputVariants.size[inputSize],
          className
        )}
        {...props}
      />
      {error && (
        <p className="text-sm text-red-600">{error}</p>
      )}
      {helper && !error && (
        <p className="text-sm text-gray-500">{helper}</p>
      )}
    </div>
  );
});

Input.displayName = 'Input';
```

# ==== src/components/ui/modal.tsx ====

```
// frontend/src/components/ui/modal.tsx
'use client';

import { cn } from '@/utils/cn';
import { Dialog, Transition } from '@headlessui/react';
import { XMarkIcon } from '@heroicons/react/24/outline';
import { Fragment, ReactNode } from 'react';

// Easy to change modal styling
const modalVariants = {
  size: {
    sm: 'max-w-md',
    md: 'max-w-lg',
    lg: 'max-w-2xl',
    xl: 'max-w-4xl',
    full: 'max-w-7xl',
  },
  position: {
    center: 'items-center justify-center',
    top: 'items-start justify-center pt-16',
  }
};

const overlayStyles = 'fixed inset-0 bg-navy-900 bg-opacity-50 transition-opacity';
const panelStyles = 'relative transform overflow-hidden rounded-lg bg-white text-left shadow-xl transition-all';

interface ModalProps {
  isOpen: boolean;
  onClose: () => void;
  size?: keyof typeof modalVariants.size;
  position?: keyof typeof modalVariants.position;
  title?: string;
  description?: string;
  showCloseButton?: boolean;
  children: ReactNode;
  className?: string;
}

export function Modal({
  isOpen,
  onClose,
  size = 'md',
  position = 'center',
  title,
  description,
  showCloseButton = true,
  children,
  className
}: ModalProps) {
  return (
    <Transition appear show={isOpen} as={Fragment}>
      <Dialog as="div" className="relative z-50" onClose={onClose}>
        <Transition.Child
          as={Fragment}
          enter="ease-out duration-300"
          enterFrom="opacity-0"
          enterTo="opacity-100"
          leave="ease-in duration-200"
          leaveFrom="opacity-100"
          leaveTo="opacity-0"
        >
          <div className={overlayStyles} />
        </Transition.Child>

        <div className="fixed inset-0 overflow-y-auto">
          <div className={cn(
            'flex min-h-full p-4 text-center',
            modalVariants.position[position]
          )}>
            <Transition.Child
              as={Fragment}
              enter="ease-out duration-300"
              enterFrom="opacity-0 scale-95"
              enterTo="opacity-100 scale-100"
              leave="ease-in duration-200"
              leaveFrom="opacity-100 scale-100"
              leaveTo="opacity-0 scale-95"
            >
              <Dialog.Panel className={cn(
                panelStyles,
                modalVariants.size[size],
                'w-full',
                className
              )}>
                {/* Header */}
                {(title || showCloseButton) && (
                  <div className="flex items-center justify-between p-6 pb-4">
                    <div>
                      {title && (
                        <Dialog.Title className="text-lg font-serif font-medium text-navy-900">
                          {title}
                        </Dialog.Title>
                      )}
                      {description && (
                        <Dialog.Description className="mt-1 text-sm text-navy-600">
                          {description}
                        </Dialog.Description>
                      )}
                    </div>
                    {showCloseButton && (
                      <button
                        type="button"
                        className="rounded-md text-navy-400 hover:text-navy-600 focus:outline-none focus:ring-2 focus:ring-navy-500"
                        onClick={onClose}
                      >
                        <XMarkIcon className="h-6 w-6" />
                      </button>
                    )}
                  </div>
                )}

                {/* Content */}
                <div className={cn(
                  'px-6',
                  (title || showCloseButton) ? 'pb-6' : 'py-6'
                )}>
                  {children}
                </div>
              </Dialog.Panel>
            </Transition.Child>
          </div>
        </div>
      </Dialog>
    </Transition>
  );
}
```

# ==== src/components/ui/select.tsx ====

```
// frontend/src/components/ui/select.tsx
import { cn } from '@/utils/cn';
import { SelectHTMLAttributes, forwardRef } from 'react';

interface SelectProps extends SelectHTMLAttributes<HTMLSelectElement> {
  label?: string;
  error?: string;
  options: Array<{ value: string; label: string }>;
  placeholder?: string;
}

export const Select = forwardRef<HTMLSelectElement, SelectProps>(({
  label,
  error,
  options,
  placeholder = 'Select an option',
  className,
  ...props
}, ref) => {
  return (
    <div className="space-y-1">
      {label && (
        <label className="block text-sm font-medium text-navy-900">
          {label}
          {props.required && <span className="text-red-500 ml-1">*</span>}
        </label>
      )}
      <select
        ref={ref}
        className={cn(
          'w-full px-4 py-3 text-base border border-gray-300 rounded-md shadow-sm transition-colors duration-200',
          'focus:border-navy-500 focus:ring-navy-500 text-gray-900 bg-white',
          'disabled:opacity-50 disabled:cursor-not-allowed',
          error && 'border-red-300 focus:border-red-500 focus:ring-red-500',
          className
        )}
        {...props}
      >
        <option value="" className="text-gray-400">{placeholder}</option>
        {options.map(option => (
          <option key={option.value} value={option.value} className="text-gray-900">
            {option.label}
          </option>
        ))}
      </select>
      {error && (
        <p className="text-sm text-red-600">{error}</p>
      )}
    </div>
  );
});

Select.displayName = 'Select';
```

# ==== src/hooks/use-click-away.ts ====

```
// frontend/src/hooks/use-click-away.ts
import { useEffect, RefObject } from 'react';

export function useClickAway<T extends HTMLElement>(
  ref: RefObject<T | null>, // 👈 Add | null here
  handler: () => void
) {
  useEffect(() => {
    const listener = (event: MouseEvent | TouchEvent) => {
      if (!ref.current || ref.current.contains(event.target as Node)) {
        return;
      }
      handler();
    };

    document.addEventListener('mousedown', listener);
    document.addEventListener('touchstart', listener);

    return () => {
      document.removeEventListener('mousedown', listener);
      document.removeEventListener('touchstart', listener);
    };
  }, [ref, handler]);
}
```

# ==== src/lib/api-client.ts ====

```
// frontend/src/lib/api-client.ts
import axios from 'axios';

export const apiClient = axios.create({
  baseURL: process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8005',
  withCredentials: true,
  headers: {
    'Content-Type': 'application/json',
  }
});

// Request interceptor for CSRF token
apiClient.interceptors.request.use(async (config) => {
  if (['post', 'put', 'patch', 'delete'].includes(config.method!)) {
    try {
      const csrfResponse = await axios.get(`${config.baseURL}/api/customer/csrf-token/`, {
        withCredentials: true
      });
      config.headers['X-CSRFToken'] = csrfResponse.data.csrf_token;
    } catch (error) {
      console.warn('Could not fetch CSRF token:', error);
    }
  }
  return config;
});

// Response interceptor for error handling
apiClient.interceptors.response.use(
  (response) => response,
  (error) => {
    if (error.response?.status === 401) {
      console.log('Auth error detected');
    }
    return Promise.reject(error);
  }
);
```

# ==== src/lib/query-client.ts ====

```
// frontend/src/lib/query-client.ts
import { QueryClient } from '@tanstack/react-query';

export const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      staleTime: 1000 * 60 * 5, // 5 minutes
      gcTime: 1000 * 60 * 30, // 30 minutes
      retry: (failureCount, error: any) => {
        if (error?.response?.status === 401) return false;
        return failureCount < 3;
      },
      refetchOnWindowFocus: false,
    },
    mutations: {
      retry: 1,
    }
  }
});
```

# ==== src/stores/auth-store.ts ====

```
// frontend/src/stores/auth-store.ts
import { create } from 'zustand';
import { persist } from 'zustand/middleware';
import type { DjangoUser, CustomerProfile } from '@/types';

interface AuthState {
  user: DjangoUser | null;
  customerProfile: CustomerProfile | null;
  isAuthenticated: boolean;
  isLoading: boolean;
}

interface AuthActions {
  setAuth: (user: DjangoUser, profile: CustomerProfile) => void;
  clearAuth: () => void;
  setLoading: (loading: boolean) => void;
  updateProfile: (updates: Partial<CustomerProfile>) => void;
}

export const useAuthStore = create<AuthState & AuthActions>()(
  persist(
    (set, get) => ({
      // State
      user: null,
      customerProfile: null,
      isAuthenticated: false,
      isLoading: false,

      // Actions
      setAuth: (user, profile) => set({
        user,
        customerProfile: profile,
        isAuthenticated: true,
        isLoading: false
      }),

      clearAuth: () => set({
        user: null,
        customerProfile: null,
        isAuthenticated: false,
        isLoading: false
      }),

      setLoading: (loading) => set({ isLoading: loading }),

      updateProfile: (updates) => set((state) => ({
        customerProfile: state.customerProfile 
          ? { ...state.customerProfile, ...updates }
          : null
      }))
    }),
    {
      name: 'totetaxi-auth',
      partialize: (state) => ({
        user: state.user,
        customerProfile: state.customerProfile,
        isAuthenticated: state.isAuthenticated
      })
    }
  )
);
```

# ==== src/stores/booking-store.ts ====

```
import { create } from 'zustand';
import { persist } from 'zustand/middleware';
// frontend/src/stores/booking-store.ts
export interface BookingAddress {
  address_line_1: string;
  address_line_2?: string;
  city: string;
  state: 'NY' | 'CT' | 'NJ';
  zip_code: string;
}

export interface BookingData {
  // Service selection
  service_type?: 'mini_move' | 'standard_delivery' | 'specialty_item';
  mini_move_package_id?: string;
  include_packing?: boolean;
  include_unpacking?: boolean;
  standard_delivery_item_count?: number;
  is_same_day_delivery?: boolean;
  specialty_item_ids?: string[];
  
  // Date and time
  pickup_date?: string;
  pickup_time?: 'morning' | 'afternoon' | 'evening';
  
  // Addresses
  pickup_address?: BookingAddress;
  delivery_address?: BookingAddress;
  
  // Customer info (for guest checkout)
  customer_info?: {
    first_name: string;
    last_name: string;
    email: string;
    phone: string;
  };
  
  // Additional options
  special_instructions?: string;
  coi_required?: boolean;
  
  // Pricing
  pricing_data?: {
    base_price_dollars: number;
    surcharge_dollars: number;
    coi_fee_dollars: number;
    organizing_total_dollars: number;
    total_price_dollars: number;
  };
}

interface BookingWizardState {
  currentStep: number;
  isLoading: boolean;
  bookingData: BookingData;
  errors: Record<string, string>;
  isBookingComplete: boolean;
  completedBookingNumber?: string;
}

interface BookingWizardActions {
  setCurrentStep: (step: number) => void;
  nextStep: () => void;
  previousStep: () => void;
  updateBookingData: (data: Partial<BookingData>) => void;
  setLoading: (loading: boolean) => void;
  setError: (field: string, message: string) => void;
  clearError: (field: string) => void;
  clearErrors: () => void;
  resetWizard: () => void;
  canProceedToStep: (step: number) => boolean;
  setBookingComplete: (bookingNumber: string) => void;
}

const initialBookingData: BookingData = {
  service_type: 'mini_move',
  pickup_time: 'morning',
  coi_required: false,
  include_packing: false,
  include_unpacking: false,
  is_same_day_delivery: false,
};

export const useBookingWizard = create<BookingWizardState & BookingWizardActions>()(
  persist(
    (set, get) => ({
      // State
      currentStep: 1,
      isLoading: false,
      bookingData: initialBookingData,
      errors: {},
      isBookingComplete: false,
      completedBookingNumber: undefined,

      // Actions
      setCurrentStep: (step) => set({ currentStep: step }),
      
      nextStep: () => set((state) => ({ 
        currentStep: Math.min(state.currentStep + 1, 5) 
      })),
      
      previousStep: () => set((state) => ({ 
        currentStep: Math.max(state.currentStep - 1, 1) 
      })),
      
      updateBookingData: (data) => set((state) => ({
        bookingData: { ...state.bookingData, ...data }
      })),
      
      setLoading: (loading) => set({ isLoading: loading }),
      
      setError: (field, message) => set((state) => ({
        errors: { ...state.errors, [field]: message }
      })),
      
      clearError: (field) => set((state) => {
        const newErrors = { ...state.errors };
        delete newErrors[field];
        return { errors: newErrors };
      }),
      
      clearErrors: () => set({ errors: {} }),
      
      setBookingComplete: (bookingNumber) => set({
        isBookingComplete: true,
        completedBookingNumber: bookingNumber
      }),
      
      resetWizard: () => {
        console.log('🔄 Resetting booking wizard');
        
        const newState = {
          currentStep: 1,
          isLoading: false,
          bookingData: { ...initialBookingData },
          errors: {},
          isBookingComplete: false,
          completedBookingNumber: undefined
        };
        
        set(newState);
        
        // Force clear localStorage
        if (typeof window !== 'undefined') {
          try {
            localStorage.removeItem('totetaxi-booking-wizard');
            console.log('🗑️ Cleared booking wizard from localStorage');
          } catch (e) {
            console.warn('Could not clear localStorage:', e);
          }
        }
      },
      
      canProceedToStep: (step) => {
        const { bookingData } = get();
        
        switch (step) {
          case 1: return true; // Service selection always available
          case 2: // Date/time step
            return !!bookingData.service_type && (
              (bookingData.service_type === 'mini_move' && !!bookingData.mini_move_package_id) ||
              (bookingData.service_type === 'standard_delivery' && !!bookingData.standard_delivery_item_count) ||
              (bookingData.service_type === 'specialty_item' && !!bookingData.specialty_item_ids?.length)
            );
          case 3: // Address step
            return !!bookingData.pickup_date;
          case 4: // Customer info step
            return !!bookingData.pickup_address && !!bookingData.delivery_address;
          case 5: // Review/payment step
            return !!bookingData.customer_info?.email;
          default:
            return false;
        }
      }
    }),
    {
      name: 'totetaxi-booking-wizard',
      partialize: (state) => ({
        bookingData: state.bookingData,
        currentStep: state.currentStep,
        isBookingComplete: state.isBookingComplete,
        completedBookingNumber: state.completedBookingNumber
      })
    }
  )
);
```

# ==== src/stores/ui-store.ts ====

```
// frontend/src/stores/ui-store.ts
import { create } from 'zustand';

interface Notification {
  id: string;
  type: 'success' | 'error' | 'warning' | 'info';
  message: string;
  duration?: number;
}

interface UIState {
  sidebarOpen: boolean;
  theme: 'light' | 'dark';
  notifications: Notification[];
  modals: {
    login: boolean;
    register: boolean;
    addressForm: boolean;
    paymentMethod: boolean;
  };
}

interface UIActions {
  toggleSidebar: () => void;
  setSidebar: (open: boolean) => void;
  setTheme: (theme: 'light' | 'dark') => void;
  openModal: (modal: keyof UIState['modals']) => void;
  closeModal: (modal: keyof UIState['modals']) => void;
  addNotification: (notification: Omit<Notification, 'id'>) => void;
  removeNotification: (id: string) => void;
  clearNotifications: () => void;
}

export const useUIStore = create<UIState & UIActions>((set, get) => ({
  // State
  sidebarOpen: false,
  theme: 'light',
  notifications: [],
  modals: {
    login: false,
    register: false,
    addressForm: false,
    paymentMethod: false,
  },

  // Actions
  toggleSidebar: () => set((state) => ({ sidebarOpen: !state.sidebarOpen })),
  setSidebar: (open) => set({ sidebarOpen: open }),
  setTheme: (theme) => set({ theme }),

  openModal: (modal) => set((state) => ({
    modals: { ...state.modals, [modal]: true }
  })),

  closeModal: (modal) => set((state) => ({
    modals: { ...state.modals, [modal]: false }
  })),

  addNotification: (notification) => set((state) => ({
    notifications: [
      ...state.notifications,
      { ...notification, id: Math.random().toString(36).substr(2, 9) }
    ]
  })),

  removeNotification: (id) => set((state) => ({
    notifications: state.notifications.filter(n => n.id !== id)
  })),

  clearNotifications: () => set({ notifications: [] })
}));
```

# ==== src/types/index.ts ====

```
// frontend/src/types/index.ts
// Django User model interface
export interface DjangoUser {
  id: number;
  username: string;
  email: string;
  first_name: string;
  last_name: string;
  is_active: boolean;
  date_joined: string;
}

// CustomerProfile interface
export interface CustomerProfile {
  id: string;
  user: DjangoUser;
  phone: string;
  stripe_customer_id: string;
  total_bookings: number;
  total_spent_cents: number;
  total_spent_dollars: number;
  preferred_pickup_time: 'morning' | 'afternoon' | 'evening';
  email_notifications: boolean;
  sms_notifications: boolean;
  is_vip: boolean;
  last_booking_at: string | null;
}

// Authentication responses
export interface AuthResponse {
  message: string;
  user: DjangoUser;
  customer_profile: CustomerProfile;
  csrf_token: string;
}

export interface MiniMovePackage {
  id: string;
  package_type: 'petite' | 'standard' | 'full';
  name: string;
  description: string;
  base_price_dollars: number;
  max_items: number | null;
  coi_included: boolean;
  coi_fee_dollars: number;
  is_most_popular: boolean;
  priority_scheduling: boolean;  // Changed: moved out of features
  protective_wrapping: boolean;  // Changed: moved out of features
}
export interface SpecialtyItem {
  id: string;
  item_type: string;
  name: string;
  description: string;
  price_dollars: number;
  requires_van_schedule: boolean;
  special_handling: boolean;
}

export interface ServiceCatalog {
  mini_move_packages: MiniMovePackage[];
  standard_delivery: {
    price_per_item_dollars: number;
    minimum_items: number;
    minimum_charge_dollars: number;
    same_day_flat_rate_dollars: number;
    max_weight_per_item_lbs: number;
  } | null;
  specialty_items: SpecialtyItem[];
}

// API Error types
export interface APIError {
  message: string;
  field_errors?: Record<string, string[]>;
}

// Add these booking-related types to the existing file

export interface BookingWizardState {
  currentStep: number;
  isLoading: boolean;
  bookingData: BookingData;
  errors: Record<string, string>;
}

export interface BookingData {
  service_type: 'mini_move' | 'standard_delivery' | 'specialty_item';
  mini_move_package_id?: string;
  include_packing?: boolean;
  include_unpacking?: boolean;
  standard_delivery_item_count?: number;
  is_same_day_delivery?: boolean;
  specialty_item_ids?: string[];
  pickup_date?: string;
  pickup_time?: 'morning' | 'afternoon' | 'evening';
  pickup_address?: BookingAddress;
  delivery_address?: BookingAddress;
  customer_info?: {
    first_name: string;
    last_name: string;
    email: string;
    phone: string;
  };
  special_instructions?: string;
  coi_required?: boolean;
  pricing_data?: {
    base_price_dollars: number;
    surcharge_dollars: number;
    coi_fee_dollars: number;
    organizing_total_dollars: number;
    total_price_dollars: number;
  };
}

export interface BookingAddress {
  address_line_1: string;
  address_line_2?: string;
  city: string;
  state: 'NY' | 'CT' | 'NJ';
  zip_code: string;
}
```

# ==== src/utils/cn.ts ====

```
import { clsx, type ClassValue } from 'clsx';
import { twMerge } from 'tailwind-merge';

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}
```

# ==== tailwind.config.js ====

```
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      fontFamily: {
        serif: ['var(--font-playfair)', 'serif'],
        sans: ['var(--font-inter)', 'sans-serif'],
      },
      colors: {
        navy: {
          50: '#f0f4f8',
          100: '#d9e2ec',
          200: '#bcccdc',
          300: '#9fb3c8',
          400: '#829ab1',
          500: '#627d98',
          600: '#486581',
          700: '#334e68',
          800: '#243b53',
          900: '#1a365d',
        },
        gold: {
          50: '#fffdf7',
          100: '#fef7e0',
          200: '#fdecc0',
          300: '#fbdb94',
          400: '#f7c365',
          500: '#d69e2e',
          600: '#b7791f',
          700: '#975a16',
          800: '#744210',
          900: '#5f370e',
        },
        cream: {
          50: '#fefcf3',
          100: '#fef7e0',
          200: '#fdecc0',
          300: '#fbdb94',
          400: '#f7c365',
          500: '#f1a545',
          600: '#d69e2e',
          700: '#b7791f',
          800: '#975a16',
          900: '#744210',
        }
      },
      container: {
        center: true,
        padding: "2rem",
        screens: {
          "2xl": "1400px",
        },
      },
    },
  },
  plugins: [],
}
```

# ==== tsconfig.json ====

```
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}

```

