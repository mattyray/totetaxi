# Generated by Django 5.2.5 on 2025-09-08 21:42

from django.db import migrations


def populate_organizing_services(apps, schema_editor):
    """Populate organizing services with initial pricing data"""
    OrganizingService = apps.get_model('services', 'OrganizingService')
    
    # Create all 6 organizing services
    organizing_services = [
        # PETITE TIER
        {
            'service_type': 'petite_packing',
            'mini_move_tier': 'petite',
            'name': 'Petite Packing',
            'description': '1/2 day (up to 4 hours) with 2 organizers. Includes garment bags, moving bags + additional packing supplies upon request (up to $250).',
            'price_cents': 140000,  # $1,400
            'duration_hours': 4,
            'organizer_count': 2,
            'supplies_allowance_cents': 25000,  # $250
            'is_packing_service': True,
            'is_active': True,
        },
        {
            'service_type': 'petite_unpacking',
            'mini_move_tier': 'petite',
            'name': 'Petite Unpacking',
            'description': '1/2 day (up to 4 hours) with 2 organizers. Organizing light (no supplies).',
            'price_cents': 113000,  # $1,130
            'duration_hours': 4,
            'organizer_count': 2,
            'supplies_allowance_cents': 0,  # No supplies for unpacking
            'is_packing_service': False,
            'is_active': True,
        },
        
        # STANDARD TIER
        {
            'service_type': 'standard_packing',
            'mini_move_tier': 'standard',
            'name': 'Standard Packing',
            'description': '1 day (up to 8 hours) with 2 organizers. Includes garment bags, moving bags + additional packing supplies upon request (up to $250).',
            'price_cents': 253500,  # $2,535
            'duration_hours': 8,
            'organizer_count': 2,
            'supplies_allowance_cents': 25000,  # $250
            'is_packing_service': True,
            'is_active': True,
        },
        {
            'service_type': 'standard_unpacking',
            'mini_move_tier': 'standard',
            'name': 'Standard Unpacking',
            'description': '1 day (up to 8 hours) with 2 organizers. Organizing light (no supplies).',
            'price_cents': 226500,  # $2,265
            'duration_hours': 8,
            'organizer_count': 2,
            'supplies_allowance_cents': 0,  # No supplies for unpacking
            'is_packing_service': False,
            'is_active': True,
        },
        
        # FULL TIER
        {
            'service_type': 'full_packing',
            'mini_move_tier': 'full',
            'name': 'Full Packing',
            'description': '1 day (up to 8 hours) with 4 organizers. Includes garment bags, moving bags + additional packing supplies upon request (up to $500).',
            'price_cents': 507000,  # $5,070
            'duration_hours': 8,
            'organizer_count': 4,
            'supplies_allowance_cents': 50000,  # $500
            'is_packing_service': True,
            'is_active': True,
        },
        {
            'service_type': 'full_unpacking',
            'mini_move_tier': 'full',
            'name': 'Full Unpacking',
            'description': '1 day (up to 8 hours) with 4 organizers. Organizing light (no supplies).',
            'price_cents': 452500,  # $4,525
            'duration_hours': 8,
            'organizer_count': 4,
            'supplies_allowance_cents': 0,  # No supplies for unpacking
            'is_packing_service': False,
            'is_active': True,
        },
    ]
    
    # Create all organizing services
    for service_data in organizing_services:
        OrganizingService.objects.get_or_create(
            service_type=service_data['service_type'],
            defaults=service_data
        )


def reverse_populate_organizing_services(apps, schema_editor):
    """Remove organizing services data"""
    OrganizingService = apps.get_model('services', 'OrganizingService')
    OrganizingService.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ('services', '0002_organizingservice'),
    ]

    operations = [
        migrations.RunPython(
            populate_organizing_services,
            reverse_populate_organizing_services
        ),
    ]