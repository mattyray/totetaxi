# Generated by Django 5.2.5 on 2025-08-24 18:58

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='GuestCheckout',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254)),
                ('phone', models.CharField(max_length=20, validators=[django.core.validators.RegexValidator(regex='^\\+?1?\\d{9,15}$')])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'bookings_guest_checkout',
            },
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('address_line_1', models.CharField(max_length=200)),
                ('address_line_2', models.CharField(blank=True, max_length=200)),
                ('city', models.CharField(max_length=100)),
                ('state', models.CharField(choices=[('NY', 'New York'), ('CT', 'Connecticut'), ('NJ', 'New Jersey')], max_length=2)),
                ('zip_code', models.CharField(max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('customer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='booking_addresses', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'bookings_address',
            },
        ),
        migrations.CreateModel(
            name='Booking',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('booking_number', models.CharField(blank=True, max_length=20, unique=True)),
                ('service_type', models.CharField(choices=[('mini_move', 'Mini Move'), ('standard_delivery', 'Standard Delivery'), ('specialty_item', 'Specialty Item')], max_length=20)),
                ('pickup_date', models.DateField()),
                ('pickup_time', models.CharField(choices=[('morning', '8 AM - 11 AM'), ('afternoon', '12 PM - 3 PM'), ('evening', '4 PM - 7 PM')], default='morning', max_length=20)),
                ('special_instructions', models.TextField(blank=True)),
                ('coi_required', models.BooleanField(default=False)),
                ('total_price_cents', models.PositiveBigIntegerField(default=0)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('confirmed', 'Confirmed'), ('paid', 'Paid'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('customer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to=settings.AUTH_USER_MODEL)),
                ('delivery_address', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='delivery_bookings', to='bookings.address')),
                ('pickup_address', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='pickup_bookings', to='bookings.address')),
                ('guest_checkout', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='booking', to='bookings.guestcheckout')),
            ],
            options={
                'db_table': 'bookings_booking',
                'constraints': [models.CheckConstraint(condition=models.Q(models.Q(('customer__isnull', False), ('guest_checkout__isnull', True)), models.Q(('customer__isnull', True), ('guest_checkout__isnull', False)), _connector='OR'), name='booking_exactly_one_customer_type')],
            },
        ),
    ]
